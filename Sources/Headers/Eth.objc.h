// Objective-C API for talking to github.com/coming-chat/wallet-SDK/core/eth Go package.
//   gobind -lang=objc github.com/coming-chat/wallet-SDK/core/eth
//
// File is generated by gobind. Do not edit.

#ifndef __Eth_H__
#define __Eth_H__

@import Foundation;
#include "ref.h"
#include "Universe.objc.h"

#include "Base.objc.h"

@class EthAccount;
@class EthBuildTxResult;
@class EthCallMethodOpts;
@class EthCallMethodOptsBigInt;
@class EthCallMsg;
@class EthChain;
@class EthCoinUtil;
@class EthErc20Token;
@class EthErc20TokenInfo;
@class EthErc20TxParams;
@class EthEthChain;
@class EthGasPrice;
@class EthOptimismLayer2Gas;
@class EthReceipt;
@class EthRedPacketAction;
@class EthRpcLatency;
@class EthRpcReachability;
@class EthToken;
@class EthTransaction;
@class EthTransactionByHashResult;
@class EthUrlParam;
@class EthUtil;
@protocol EthJsonable;
@class EthJsonable;
@protocol EthRpcReachabilityDelegate;
@class EthRpcReachabilityDelegate;
@protocol EthTokenProtocol;
@class EthTokenProtocol;

@protocol EthJsonable <NSObject>
/**
 * 将对象转为 json 字符串
 */
- (NSString* _Nonnull)jsonString;
@end

@protocol EthRpcReachabilityDelegate <NSObject>
/**
 * A node request failed
 */
- (void)reachabilityDidFailNode:(EthRpcReachability* _Nullable)tester latency:(EthRpcLatency* _Nullable)latency;
/**
 * The entire network connection test task is over
@param overview Overview of the results of all connection tests
 */
- (void)reachabilityDidFinish:(EthRpcReachability* _Nullable)tester overview:(NSString* _Nullable)overview;
/**
 * A node has received a response
 */
- (void)reachabilityDidReceiveNode:(EthRpcReachability* _Nullable)tester latency:(EthRpcLatency* _Nullable)latency;
@end

@protocol EthTokenProtocol <NSObject>
- (BaseBalance* _Nullable)balanceOfAccount:(id<BaseAccount> _Nullable)account error:(NSError* _Nullable* _Nullable)error;
- (BaseBalance* _Nullable)balanceOfAddress:(NSString* _Nullable)address error:(NSError* _Nullable* _Nullable)error;
- (BaseBalance* _Nullable)balanceOfPublicKey:(NSString* _Nullable)publicKey error:(NSError* _Nullable* _Nullable)error;
- (BaseOptionalString* _Nullable)buildTransferTx:(NSString* _Nullable)privateKey transaction:(EthTransaction* _Nullable)transaction error:(NSError* _Nullable* _Nullable)error;
- (BaseOptionalString* _Nullable)buildTransferTxWithAccount:(EthAccount* _Nullable)account transaction:(EthTransaction* _Nullable)transaction error:(NSError* _Nullable* _Nullable)error;
- (id<BaseChain> _Nullable)chain;
/**
 * need `fromAddress`, `receiverAddress`, `gasPrice`, `gasLimit`, `amount`
 */
- (EthOptimismLayer2Gas* _Nullable)estimateGasFeeLayer2:(EthCallMsg* _Nullable)msg error:(NSError* _Nullable* _Nullable)error;
- (NSString* _Nonnull)estimateGasLimit:(NSString* _Nullable)fromAddress receiverAddress:(NSString* _Nullable)receiverAddress gasPrice:(NSString* _Nullable)gasPrice amount:(NSString* _Nullable)amount error:(NSError* _Nullable* _Nullable)error;
- (BaseTokenInfo* _Nullable)tokenInfo:(NSError* _Nullable* _Nullable)error;
@end

@interface EthAccount : NSObject <goSeqRefInterface, BaseAccount, BaseAddressUtil> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nullable instancetype)initWithMnemonic:(NSString* _Nullable)mnemonic;
@property (nonatomic) EthUtil* _Nullable util;
/**
 * The ethereum address is same as public key in coming
 */
- (NSString* _Nonnull)address;
- (NSString* _Nonnull)decodeAddressToPublicKey:(NSString* _Nullable)address error:(NSError* _Nullable* _Nullable)error;
- (NSString* _Nonnull)encodePublicKeyToAddress:(NSString* _Nullable)publicKey error:(NSError* _Nullable* _Nullable)error;
- (BOOL)isValidAddress:(NSString* _Nullable)address;
/**
 * @return privateKey data
 */
- (NSData* _Nullable)privateKey:(NSError* _Nullable* _Nullable)error;
/**
 * @return privateKey string that will start with 0x.
 */
- (NSString* _Nonnull)privateKeyHex:(NSError* _Nullable* _Nullable)error;
/**
 * Is deocde from address
@return publicKey data
 */
- (NSData* _Nullable)publicKey;
/**
 * The ethereum public key is same as address in coming
@return publicKey string that will start with 0x.
 */
- (NSString* _Nonnull)publicKeyHex;
- (NSData* _Nullable)sign:(NSData* _Nullable)message password:(NSString* _Nullable)password error:(NSError* _Nullable* _Nullable)error;
- (BaseOptionalString* _Nullable)signHex:(NSString* _Nullable)messageHex password:(NSString* _Nullable)password error:(NSError* _Nullable* _Nullable)error;
@end

@interface EthBuildTxResult : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
// skipped field BuildTxResult.SignedTx with unsupported type: *github.com/ethereum/go-ethereum/core/types.Transaction

@property (nonatomic) NSString* _Nonnull txHex;
@end

@interface EthCallMethodOpts : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) int64_t nonce;
@property (nonatomic) NSString* _Nonnull value;
@property (nonatomic) NSString* _Nonnull gasPrice;
@property (nonatomic) NSString* _Nonnull gasLimit;
@property (nonatomic) BOOL isPredictError;
@property (nonatomic) NSString* _Nonnull maxPriorityFeePerGas;
@end

@interface EthCallMethodOptsBigInt : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
// skipped field CallMethodOptsBigInt.Nonce with unsupported type: uint64

// skipped field CallMethodOptsBigInt.Value with unsupported type: *math/big.Int

// skipped field CallMethodOptsBigInt.GasPrice with unsupported type: *math/big.Int

// skipped field CallMethodOptsBigInt.GasLimit with unsupported type: uint64

@property (nonatomic) BOOL isPredictError;
// skipped field CallMethodOptsBigInt.MaxPriorityFeePerGas with unsupported type: *math/big.Int

@end

/**
 * CallMsg contains parameters for contract calls.
 */
@interface EthCallMsg : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewCallMsg creates an empty contract call parameter list.
 */
- (nullable instancetype)init;
- (NSData* _Nullable)getData;
- (NSString* _Nonnull)getDataHex;
- (NSString* _Nonnull)getFrom;
- (NSString* _Nonnull)getGasLimit;
- (NSString* _Nonnull)getGasPrice;
- (NSString* _Nonnull)getTo;
- (NSString* _Nonnull)getValue;
- (void)setData:(NSData* _Nullable)data;
- (void)setDataHex:(NSString* _Nullable)hex;
- (void)setFrom:(NSString* _Nullable)address;
- (void)setGasLimit:(NSString* _Nullable)gas;
- (void)setGasPrice:(NSString* _Nullable)price;
- (void)setTo:(NSString* _Nullable)address;
/**
 * Set amount with decimal number
 */
- (void)setValue:(NSString* _Nullable)value;
/**
 * Set amount with hexadecimal number
 */
- (void)setValueHex:(NSString* _Nullable)hex;
- (EthTransaction* _Nullable)transferToTransaction;
@end

@interface EthChain : NSObject <goSeqRefInterface, BaseChain> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nullable instancetype)initWithRpc:(NSString* _Nullable)rpcUrl;
@property (nonatomic) NSString* _Nonnull rpcUrl;
- (BaseBalance* _Nullable)balanceOfAccount:(id<BaseAccount> _Nullable)account error:(NSError* _Nullable* _Nullable)error;
- (BaseBalance* _Nullable)balanceOfAddress:(NSString* _Nullable)address error:(NSError* _Nullable* _Nullable)error;
- (BaseBalance* _Nullable)balanceOfPublicKey:(NSString* _Nullable)publicKey error:(NSError* _Nullable* _Nullable)error;
// skipped method Chain.BatchErc20TokenBalance with unsupported parameter or return types

/**
 * SDK 批量请求代币余额，因为 golang 导出的方法不支持数组，因此传参和返回都只能用字符串
@param contractListString 批量查询的代币的合约地址字符串，用逗号隔开，例如: "add1,add2,add3"
@param address 用户的钱包地址
@return 余额列表，顺序与传入合约顺序是保持一致的，例如: "b1,b2,b3"
@throw 如果任意一个代币请求余额出错时，会抛出错误
 */
- (NSString* _Nonnull)batchFetchErc20TokenBalance:(NSString* _Nullable)contractListString address:(NSString* _Nullable)address error:(NSError* _Nullable* _Nullable)error;
/**
 * Batch fetch the transaction status, the hash list and the return value,
which can only be passed as strings separated by ","
@param hashListString The hash of the transactions to be queried in batches, a string concatenated with ",": "hash1,hash2,hash3"
@return Batch transaction status, its order is consistent with hashListString: "status1,status2,status3"
 */
- (NSString* _Nonnull)batchFetchTransactionStatus:(NSString* _Nullable)hashListString;
- (BaseOptionalString* _Nullable)buildTransferTx:(NSString* _Nullable)privateKey transaction:(EthTransaction* _Nullable)transaction error:(NSError* _Nullable* _Nullable)error;
- (BaseOptionalString* _Nullable)buildTransferTxWithAccount:(EthAccount* _Nullable)account transaction:(EthTransaction* _Nullable)transaction error:(NSError* _Nullable* _Nullable)error;
/**
 * call eth_call method
@param blockNumber Especially -2 is the latest block, -1 is pending block.
 */
- (NSString* _Nonnull)callContract:(EthCallMsg* _Nullable)msg blockNumber:(int64_t)blockNumber error:(NSError* _Nullable* _Nullable)error;
- (NSString* _Nonnull)chainId:(NSError* _Nullable* _Nullable)error;
- (id<EthTokenProtocol> _Nullable)erc20Token:(NSString* _Nullable)contractAddress;
- (BaseOptionalString* _Nullable)estimateGasLimit:(EthCallMsg* _Nullable)msg error:(NSError* _Nullable* _Nullable)error;
/**
 * Fetch transaction details through transaction hash
 */
- (BaseTransactionDetail* _Nullable)fetchTransactionDetail:(NSString* _Nullable)hash error:(NSError* _Nullable* _Nullable)error;
/**
 * Fetch transaction status through transaction hash
 */
- (long)fetchTransactionStatus:(NSString* _Nullable)hash;
- (NSString* _Nonnull)latestBlockNumber:(NSError* _Nullable* _Nullable)error;
- (NSString* _Nonnull)latestCallContract:(EthCallMsg* _Nullable)msg error:(NSError* _Nullable* _Nullable)error;
- (id<EthTokenProtocol> _Nullable)mainEthToken;
- (id<BaseToken> _Nullable)mainToken;
/**
 * 获取交易的 nonce
 */
- (NSString* _Nonnull)nonceOfAddress:(NSString* _Nullable)address error:(NSError* _Nullable* _Nullable)error;
- (NSString* _Nonnull)pendingCallContract:(EthCallMsg* _Nullable)msg error:(NSError* _Nullable* _Nullable)error;
/**
 * Send the raw transaction on-chain
@return the hex hash string
 */
- (NSString* _Nonnull)sendRawTransaction:(NSString* _Nullable)signedTx error:(NSError* _Nullable* _Nullable)error;
/**
 * Sign a transaction
@return signed tx hash
 */
- (BaseOptionalString* _Nullable)signTransaction:(NSString* _Nullable)privateKey transaction:(EthTransaction* _Nullable)transaction error:(NSError* _Nullable* _Nullable)error;
- (BaseOptionalString* _Nullable)signTransactionWithAccount:(id<BaseAccount> _Nullable)account transaction:(EthTransaction* _Nullable)transaction error:(NSError* _Nullable* _Nullable)error;
- (BaseOptionalString* _Nullable)signWithPrivateKeyData:(NSData* _Nullable)privateKeyData transaction:(EthTransaction* _Nullable)transaction error:(NSError* _Nullable* _Nullable)error;
- (BaseOptionalString* _Nullable)suggestGasPrice:(NSError* _Nullable* _Nullable)error;
/**
 * The gas price use average grade default.
 */
- (EthGasPrice* _Nullable)suggestGasPriceEIP1559:(NSError* _Nullable* _Nullable)error;
@end

/**
 * Deprecated: CoinUtil is deprecated. Please Use EthChain instead.
 */
@interface EthCoinUtil : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * Deprecated: CoinUtil is deprecated. Please Use NewChainWithRpc() instead.
 */
- (nullable instancetype)initWithRpc:(NSString* _Nullable)rpcUrl contractAddress:(NSString* _Nullable)contractAddress walletAddress:(NSString* _Nullable)walletAddress;
/**
 * 链的 RPC 地址
 */
@property (nonatomic) NSString* _Nonnull rpcUrl;
/**
 * 币种的合约地址，如果为 nil，表示是主网的币
 */
@property (nonatomic) NSString* _Nonnull contractAddress;
/**
 * 用户的钱包地址
 */
@property (nonatomic) NSString* _Nonnull walletAddress;
/**
 * Deprecated: BuildTransferTx is deprecated. Please Use Chain.Token().BuildTransferTx() instead.
 */
- (BaseOptionalString* _Nullable)buildTransferTx:(NSString* _Nullable)privateKey receiverAddress:(NSString* _Nullable)receiverAddress nonce:(NSString* _Nullable)nonce gasPrice:(NSString* _Nullable)gasPrice gasLimit:(NSString* _Nullable)gasLimit amount:(NSString* _Nullable)amount error:(NSError* _Nullable* _Nullable)error;
/**
 * Deprecated: CoinInfo is deprecated.
 */
- (EthErc20TokenInfo* _Nullable)coinInfo:(NSError* _Nullable* _Nullable)error;
/**
 * Deprecated: Nonce is deprecated. Please Use Chain.Token().EstimateGasLimit() instead.
 */
- (NSString* _Nonnull)estimateGasLimit:(NSString* _Nullable)receiverAddress gasPrice:(NSString* _Nullable)gasPrice amount:(NSString* _Nullable)amount error:(NSError* _Nullable* _Nullable)error;
/**
 * Deprecated: FetchTransactionDetail is deprecated. Please Use Chain.FetchTransactionDetail() instead.
 */
- (BaseTransactionDetail* _Nullable)fetchTransactionDetail:(NSString* _Nullable)hashString error:(NSError* _Nullable* _Nullable)error;
/**
 * Deprecated: FetchTransactionStatus is deprecated. Please Use Chain.FetchTransactionStatus() instead.
 */
- (long)fetchTransactionStatus:(NSString* _Nullable)hashString;
/**
 * 是否是主币
 */
- (BOOL)isMainCoin;
/**
 * Deprecated: Nonce is deprecated. Please Use Chain.NonceOfAddress() instead.
 */
- (NSString* _Nonnull)nonce:(NSError* _Nullable* _Nullable)error;
/**
 * Deprecated: QueryBalance is deprecated. Please Use Chain.Token().BalanceOfAddress() instead.
 */
- (NSString* _Nonnull)queryBalance:(NSError* _Nullable* _Nullable)error;
/**
 * Deprecated: SdkBatchTransactionStatus is deprecated. Please Use Chain.SdkBatchTransactionStatus() instead.
 */
- (NSString* _Nonnull)sdkBatchTransactionStatus:(NSString* _Nullable)hashListString error:(NSError* _Nullable* _Nullable)error;
/**
 * Deprecated: SendRawTransaction is deprecated. Please Use Chain.SendRawTransaction() instead.
 */
- (NSString* _Nonnull)sendRawTransaction:(NSString* _Nullable)txHex error:(NSError* _Nullable* _Nullable)error;
@end

@interface EthErc20Token : NSObject <goSeqRefInterface, BaseToken, EthTokenProtocol> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nullable instancetype)init:(EthChain* _Nullable)chain contractAddress:(NSString* _Nullable)contractAddress;
@property (nonatomic) EthToken* _Nullable token;
@property (nonatomic) NSString* _Nonnull contractAddress;
// skipped method Erc20Token.Allowance with unsupported parameter or return types

// skipped method Erc20Token.Approve with unsupported parameter or return types

- (BaseBalance* _Nullable)balanceOfAccount:(id<BaseAccount> _Nullable)account error:(NSError* _Nullable* _Nullable)error;
- (BaseBalance* _Nullable)balanceOfAddress:(NSString* _Nullable)address error:(NSError* _Nullable* _Nullable)error;
- (BaseBalance* _Nullable)balanceOfPublicKey:(NSString* _Nullable)publicKey error:(NSError* _Nullable* _Nullable)error;
- (BaseOptionalString* _Nullable)buildTransferTx:(NSString* _Nullable)privateKey transaction:(EthTransaction* _Nullable)transaction error:(NSError* _Nullable* _Nullable)error;
- (BaseOptionalString* _Nullable)buildTransferTxWithAccount:(EthAccount* _Nullable)account transaction:(EthTransaction* _Nullable)transaction error:(NSError* _Nullable* _Nullable)error;
- (id<BaseChain> _Nullable)chain;
- (BOOL)decimal:(int16_t* _Nullable)ret0_ error:(NSError* _Nullable* _Nullable)error;
/**
 * cannot get balance
 */
- (EthErc20TokenInfo* _Nullable)erc20TokenInfo:(NSError* _Nullable* _Nullable)error;
- (EthOptimismLayer2Gas* _Nullable)estimateGasFeeLayer2:(EthCallMsg* _Nullable)msg error:(NSError* _Nullable* _Nullable)error;
- (NSString* _Nonnull)estimateGasLimit:(NSString* _Nullable)fromAddress receiverAddress:(NSString* _Nullable)receiverAddress gasPrice:(NSString* _Nullable)gasPrice amount:(NSString* _Nullable)amount error:(NSError* _Nullable* _Nullable)error;
- (BaseTokenInfo* _Nullable)tokenInfo:(NSError* _Nullable* _Nullable)error;
@end

@interface EthErc20TokenInfo : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) BaseTokenInfo* _Nullable tokenInfo;
@property (nonatomic) NSString* _Nonnull contractAddress;
@property (nonatomic) NSString* _Nonnull chainId;
@property (nonatomic) NSString* _Nonnull tokenIcon;
/**
 * Deprecated: Balance is not a token's info.
 */
@property (nonatomic) NSString* _Nonnull balance;
@end

@interface EthErc20TxParams : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) NSString* _Nonnull toAddress;
@property (nonatomic) NSString* _Nonnull amount;
@property (nonatomic) NSString* _Nonnull method;
@end

@interface EthEthChain : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nullable instancetype)init;
// skipped field EthChain.RemoteRpcClient with unsupported type: *github.com/ethereum/go-ethereum/ethclient.Client

// skipped field EthChain.RpcClient with unsupported type: *github.com/ethereum/go-ethereum/rpc.Client

/**
 * @title    主网代币余额查询
@description   返回主网代币余额，decimal为代币精度
@auth      清欢
@param     (walletAddress)     (string)  合约名称，钱包地址
@return    (string,error)       代币余额，错误信息
 */
- (NSString* _Nonnull)balance:(NSString* _Nullable)address error:(NSError* _Nullable* _Nullable)error;
// skipped method EthChain.BatchTransactionStatus with unsupported parameter or return types

/**
 * 对合约进行调用
 */
- (EthBuildTxResult* _Nullable)buildCallMethodTx:(NSString* _Nullable)privateKey contractAddress:(NSString* _Nullable)contractAddress abiStr:(NSString* _Nullable)abiStr methodName:(NSString* _Nullable)methodName opts:(EthCallMethodOpts* _Nullable)opts erc20JsonParams:(NSString* _Nullable)erc20JsonParams error:(NSError* _Nullable* _Nullable)error;
- (EthBuildTxResult* _Nullable)buildCallMethodTxWithPayload:(NSString* _Nullable)privateKey contractAddress:(NSString* _Nullable)contractAddress payload:(NSString* _Nullable)payload opts:(EthCallMethodOpts* _Nullable)opts error:(NSError* _Nullable* _Nullable)error;
/**
 * 创建ETH转账交易
 */
- (EthBuildTxResult* _Nullable)buildTransferTx:(NSString* _Nullable)privateKey toAddress:(NSString* _Nullable)toAddress opts:(EthCallMethodOpts* _Nullable)opts error:(NSError* _Nullable* _Nullable)error;
// skipped method EthChain.CallContractConstant with unsupported parameter or return types

// skipped method EthChain.CallContractConstantWithPayload with unsupported parameter or return types

- (void)close;
- (BOOL)connectRemote:(NSString* _Nullable)rpcUrl error:(NSError* _Nullable* _Nullable)error;
- (EthEthChain* _Nullable)createRemote:(NSString* _Nullable)rpcUrl error:(NSError* _Nullable* _Nullable)error;
/**
 * @param timeout time unit millsecond. 0 means use chain's default: 60000ms.
 */
- (EthEthChain* _Nullable)createRemoteWithTimeout:(NSString* _Nullable)rpcUrl timeout:(int64_t)timeout error:(NSError* _Nullable* _Nullable)error;
/**
 * Deprecated: Erc20TokenInfo is deprecated. Please Use Chain.Erc20Token().Erc20TokenInfo()
@title    Erc20代币基础信息
@description   返回代币基础信息
@auth      清欢
@param     (contractAddress, walletAddress)     (string,string)  合约名称，钱包地址
@return    (*Erc20Token,error)       Erc20Token，错误信息
 */
- (EthErc20TokenInfo* _Nullable)erc20TokenInfo:(NSString* _Nullable)contractAddress walletAddress:(NSString* _Nullable)walletAddress error:(NSError* _Nullable* _Nullable)error;
/**
 * erc20 代币 Transfer，Approve GasLimit 估计
var erc20TxParams Erc20TxParams
 */
- (NSString* _Nonnull)estimateContractGasLimit:(NSString* _Nullable)fromAddress contractAddress:(NSString* _Nullable)contractAddress abiStr:(NSString* _Nullable)abiStr methodName:(NSString* _Nullable)methodName erc20JsonParams:(NSString* _Nullable)erc20JsonParams error:(NSError* _Nullable* _Nullable)error;
/**
 * Estimated gasLimit
@param fromAddress The address where the transfer originated
@param receiverAddress The address where the transfer will received
@param gasPrice Previously acquired or entered by the user
@param amount The amount transferred
@return Estimate gasLimit, is a `String` converted from `Uint64`
 */
- (NSString* _Nonnull)estimateGasLimit:(NSString* _Nullable)fromAddress receiverAddress:(NSString* _Nullable)receiverAddress gasPrice:(NSString* _Nullable)gasPrice amount:(NSString* _Nullable)amount error:(NSError* _Nullable* _Nullable)error;
/**
 * 获取交易的详情
@param hashString 交易的 hash
@return 详情对象，该对象无法提供 CID 信息
 */
- (BaseTransactionDetail* _Nullable)fetchTransactionDetail:(NSString* _Nullable)hashString error:(NSError* _Nullable* _Nullable)error;
/**
 * 获取交易的状态
@param hashString 交易的 hash
 */
- (long)fetchTransactionStatus:(NSString* _Nullable)hashString;
/**
 * 获取最新区块高度
 */
- (BOOL)latestBlockNumber:(int64_t* _Nullable)ret0_ error:(NSError* _Nullable* _Nullable)error;
// skipped method EthChain.MethodFromPayload with unsupported parameter or return types

- (NSString* _Nonnull)methodIdFromMethodStr:(NSString* _Nullable)methodStr;
/**
 * 获取账户nonce
 */
- (NSString* _Nonnull)nonce:(NSString* _Nullable)spenderAddressHex error:(NSError* _Nullable* _Nullable)error;
// skipped method EthChain.PackParams with unsupported parameter or return types

// skipped method EthChain.RecoverSignerAddress with unsupported parameter or return types

// skipped method EthChain.RecoverSignerAddressFromMsgHash with unsupported parameter or return types

/**
 * Deprecated: SdkBatchTokenBalance is deprecated. Please Use Chain.BatchFetchErc20TokenBalance() instead.
 */
- (NSString* _Nonnull)sdkBatchTokenBalance:(NSString* _Nullable)contractListString address:(NSString* _Nullable)address error:(NSError* _Nullable* _Nullable)error;
/**
 * SDK 批量获取交易的转账状态，hash 列表和返回值，都只能用字符串，逗号隔开传递
@param hashListString 要批量查询的交易的 hash，用逗号拼接的字符串："hash1,hash2,hash3"
@return 批量的交易状态，它的顺序和 hashListString 是保持一致的: "status1,status2,status3"
 */
- (NSString* _Nonnull)sdkBatchTransactionStatus:(NSString* _Nullable)hashListString;
/**
 * 对交易进行广播
 */
- (NSString* _Nonnull)sendRawTransaction:(NSString* _Nullable)txHex error:(NSError* _Nullable* _Nullable)error;
/**
 * 以太坊的 hash 专门在数据前面加上了一段话
 */
- (NSString* _Nonnull)signHashForMsg:(NSString* _Nullable)data error:(NSError* _Nullable* _Nullable)error;
/**
 * 使用私钥对信息进行签名
 */
- (NSString* _Nonnull)signMsg:(NSString* _Nullable)privateKey data:(NSString* _Nullable)data error:(NSError* _Nullable* _Nullable)error;
// skipped method EthChain.SignTransaction with unsupported parameter or return types

/**
 * 获取标准gas价格
 */
- (NSString* _Nonnull)suggestGasPrice:(NSError* _Nullable* _Nullable)error;
/**
 * @title    Erc20代币余额
@description   返回erc20代币余额
@auth      清欢
@param     (contractAddress，walletAddress)     合约地址,钱包地址
@return    (string,error)       余额，错误信息
 */
- (NSString* _Nonnull)tokenBalance:(NSString* _Nullable)contractAddress address:(NSString* _Nullable)address error:(NSError* _Nullable* _Nullable)error;
/**
 * @title    Erc20代币精度
@description   返回代币精度
@auth      清欢
@param     (contractAddress)     合约地址
@return    (string,error)       代币精度，错误信息
 */
- (BOOL)tokenDecimal:(NSString* _Nullable)contractAddress ret0_:(int16_t* _Nullable)ret0_ error:(NSError* _Nullable* _Nullable)error;
/**
 * @title    Erc20代币名称
@description   返回代币名称
@auth      清欢
@param     (contractAddress)     合约地址
@return    (string,error)       名称，错误信息
 */
- (NSString* _Nonnull)tokenName:(NSString* _Nullable)contractAddress error:(NSError* _Nullable* _Nullable)error;
/**
 * @title    Erc20代币符号
@description   返回代币符号
@auth      清欢
@param     (contractAddress)     合约地址
@return    (string,error)       符号，错误信息
 */
- (NSString* _Nonnull)tokenSymbol:(NSString* _Nullable)contractAddress error:(NSError* _Nullable* _Nullable)error;
/**
 * 根据交易hash查询交易状态
TO-DO  返回更详细的信息，解析交易余额，交易动作
 */
- (EthTransactionByHashResult* _Nullable)transactionByHash:(NSString* _Nullable)txHash error:(NSError* _Nullable* _Nullable)error;
/**
 * TransactionReceipt 是指交易的收据，每笔交易执行完
会产生一个收据，收据中包含交易的状态，交易的gas使用情况，交易执行是否成功的状态码等信息
交易收据属性列表：
gasUsed: 交易执行时使用的gas数量
bloomFilter：交易信息日志检索
logInfoList: 交易日志集合
postTxState: 交易执行后的状态，1 表示成功，0表示失败
 */
- (EthReceipt* _Nullable)transactionReceiptByHash:(NSString* _Nullable)txHash error:(NSError* _Nullable* _Nullable)error;
// skipped method EthChain.UnpackParams with unsupported parameter or return types

// skipped method EthChain.WaitConfirm with unsupported parameter or return types

@end

@interface EthGasPrice : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
/**
 * Pending block baseFee in wei.
 */
@property (nonatomic) NSString* _Nonnull baseFee;
@property (nonatomic) NSString* _Nonnull suggestPriorityFee;
@property (nonatomic) NSString* _Nonnull maxPriorityFee;
@property (nonatomic) NSString* _Nonnull maxFee;
/**
 * MaxPriorityFee = SuggestPriorityFee * 1.5
MaxFee = (MaxPriorityFee + BaseFee) * 1.11
 */
- (EthGasPrice* _Nullable)useAverage;
/**
 * MaxPriorityFee = SuggestPriorityFee * 2.0
MaxFee = (MaxPriorityFee + BaseFee) * 1.5
 */
- (EthGasPrice* _Nullable)useHigh;
/**
 * MaxPriorityFee = SuggestPriorityFee * 1.0
MaxFee = (MaxPriorityFee + BaseFee) * 1.0
 */
- (EthGasPrice* _Nullable)useLow;
/**
 * MaxPriorityFee = SuggestPriorityFee * priorityRate
MaxFee = (MaxPriorityFee + BaseFee) * maxFeeRate
 */
- (EthGasPrice* _Nullable)useRate:(double)priorityRate maxFeeRate:(double)maxFeeRate;
@end

@interface EthOptimismLayer2Gas : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) NSString* _Nonnull l1GasLimit;
@property (nonatomic) NSString* _Nonnull l1GasPrice;
@property (nonatomic) NSString* _Nonnull l2GasLimit;
@property (nonatomic) NSString* _Nonnull l2GasPrice;
/**
 * l1GasLimit * l1GasPrice + l2Gaslimit * l2GasPrice
 */
- (NSString* _Nonnull)gasFee;
@end

/**
 * customReceipt is inherit from eth/core types.Receipt, and added some necessary properties
 */
@interface EthReceipt : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
// skipped field Receipt.Receipt with unsupported type: github.com/ethereum/go-ethereum/core/types.Receipt

// skipped field Receipt.L1Fee with unsupported type: *math/big.Int

// skipped field Receipt.EffectiveGasPrice with unsupported type: *math/big.Int

// skipped method Receipt.DecodeRLP with unsupported parameter or return types

// skipped method Receipt.EncodeRLP with unsupported parameter or return types

- (NSData* _Nullable)marshalBinary:(NSError* _Nullable* _Nullable)error;
- (NSData* _Nullable)marshalJSON:(NSError* _Nullable* _Nullable)error;
// skipped method Receipt.Size with unsupported parameter or return types

- (BOOL)unmarshalBinary:(NSData* _Nullable)b error:(NSError* _Nullable* _Nullable)error;
- (BOOL)unmarshalJSON:(NSData* _Nullable)data error:(NSError* _Nullable* _Nullable)error;
@end

@interface EthRedPacketAction : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * 结束红包领取 的操作
 */
- (nullable instancetype)initClose:(int64_t)packetId creator:(NSString* _Nullable)creator;
/**
 * 用户发红包 的操作
 */
- (nullable instancetype)initCreate:(NSString* _Nullable)erc20TokenAddress count:(long)count amount:(NSString* _Nullable)amount;
// skipped constructor RedPacketAction.NewRedPacketActionOpen with unsupported parameter or return types

@property (nonatomic) NSString* _Nonnull method;
// skipped field RedPacketAction.Params with unsupported type: []interface{}

/**
 * 保证用户发 erc20 的红包时，红包合约可以有权限操作用户的资产
@param account 要发红包的用户的账号，也许需要用到私钥来发起授权交易
@param chain evm 链
@param erc20Contract 要用作发红包的币种
@param coins 如果需要发起新授权，指定要授权的币个数 default 10^6
@return 如果授权成功，不会返回错误，如果有新授权，会返回授权交易的 hash
 */
- (NSString* _Nonnull)ensureApprovedTokens:(EthAccount* _Nullable)account chain:(EthChain* _Nullable)chain spender:(NSString* _Nullable)spender coins:(long)coins error:(NSError* _Nullable* _Nullable)error;
- (NSString* _Nonnull)estimateAmount;
/**
 * @param fromAddress 要调用红包业务的操作者
@param contractAddress 红包合约地址
@param chain 要发红包的链
 */
- (EthTransaction* _Nullable)transactionFrom:(NSString* _Nullable)fromAddress contractAddress:(NSString* _Nullable)contractAddress chain:(EthChain* _Nullable)chain error:(NSError* _Nullable* _Nullable)error;
@end

@interface EthRpcLatency : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) NSString* _Nonnull rpcUrl;
@property (nonatomic) int64_t latency;
@property (nonatomic) int64_t height;
@end

@interface EthRpcReachability : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nullable instancetype)init;
/**
 * The number of network connectivity tests to be performed per rpc. 0 means infinite, default is 1
 */
@property (nonatomic) long reachCount;
/**
 * Timeout for each connectivity test (ms). default 20000ms
 */
@property (nonatomic) int64_t timeout;
/**
 * Time interval between two network connectivity tests (ms). default 1500ms
 */
@property (nonatomic) int64_t delay;
/**
 * @param rpcList string of rpcs like "rpc1,rpc2,rpc3,..."
 */
- (void)startConnectivityDelegate:(NSString* _Nullable)rpcList delegate:(id<EthRpcReachabilityDelegate> _Nullable)delegate;
/**
 * @param rpcList string of rpcs like "rpc1,rpc2,rpc3,..."
@return jsonString sorted array base of tatency like "[{rpcUrl:rpc1,latency:100}, {rpcUrl:rpc2, latency:111}, ...]" latency unit is ms. -1 means the connection failed
 */
- (NSString* _Nonnull)startConnectivitySync:(NSString* _Nullable)rpcList;
- (void)stopConnectivity;
@end

@interface EthToken : NSObject <goSeqRefInterface, BaseToken, EthTokenProtocol> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nullable instancetype)init:(EthChain* _Nullable)chain;
- (BaseBalance* _Nullable)balanceOfAccount:(id<BaseAccount> _Nullable)account error:(NSError* _Nullable* _Nullable)error;
- (BaseBalance* _Nullable)balanceOfAddress:(NSString* _Nullable)address error:(NSError* _Nullable* _Nullable)error;
- (BaseBalance* _Nullable)balanceOfPublicKey:(NSString* _Nullable)publicKey error:(NSError* _Nullable* _Nullable)error;
- (BaseOptionalString* _Nullable)buildTransferTx:(NSString* _Nullable)privateKey transaction:(EthTransaction* _Nullable)transaction error:(NSError* _Nullable* _Nullable)error;
- (BaseOptionalString* _Nullable)buildTransferTxWithAccount:(EthAccount* _Nullable)account transaction:(EthTransaction* _Nullable)transaction error:(NSError* _Nullable* _Nullable)error;
- (id<BaseChain> _Nullable)chain;
- (EthOptimismLayer2Gas* _Nullable)estimateGasFeeLayer2:(EthCallMsg* _Nullable)msg error:(NSError* _Nullable* _Nullable)error;
- (NSString* _Nonnull)estimateGasLimit:(NSString* _Nullable)fromAddress receiverAddress:(NSString* _Nullable)receiverAddress gasPrice:(NSString* _Nullable)gasPrice amount:(NSString* _Nullable)amount error:(NSError* _Nullable* _Nullable)error;
/**
 * Warning: Main token does not support
 */
- (BaseTokenInfo* _Nullable)tokenInfo:(NSError* _Nullable* _Nullable)error;
@end

@interface EthTransaction : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nullable instancetype)init:(NSString* _Nullable)nonce gasPrice:(NSString* _Nullable)gasPrice gasLimit:(NSString* _Nullable)gasLimit to:(NSString* _Nullable)to value:(NSString* _Nullable)value data:(NSString* _Nullable)data;
- (nullable instancetype)initFromHex:(NSString* _Nullable)hexData;
@property (nonatomic) NSString* _Nonnull nonce;
@property (nonatomic) NSString* _Nonnull gasPrice;
@property (nonatomic) NSString* _Nonnull gasLimit;
@property (nonatomic) NSString* _Nonnull to;
@property (nonatomic) NSString* _Nonnull value;
@property (nonatomic) NSString* _Nonnull data;
/**
 * EIP1559, Default is ""
 */
@property (nonatomic) NSString* _Nonnull maxPriorityFeePerGas;
// skipped method Transaction.GetRawTx with unsupported parameter or return types

/**
 * This is an alias property for GasPrice in order to support EIP1559
 */
- (NSString* _Nonnull)maxFee;
/**
 * This is an alias property for GasPrice in order to support EIP1559
 */
- (void)setMaxFee:(NSString* _Nullable)maxFee;
/**
 * @return gasPrice * gasLimit + value
 */
- (NSString* _Nonnull)totalAmount;
- (BOOL)transformToErc20Transaction:(NSString* _Nullable)contractAddress error:(NSError* _Nullable* _Nullable)error;
@end

@interface EthTransactionByHashResult : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
// skipped field TransactionByHashResult.SignedTx with unsupported type: *github.com/ethereum/go-ethereum/core/types.Transaction

// skipped field TransactionByHashResult.From with unsupported type: github.com/ethereum/go-ethereum/common.Address

@property (nonatomic) BOOL isPending;
@property (nonatomic) NSString* _Nonnull status;
@property (nonatomic) NSString* _Nonnull gasUsed;
@property (nonatomic) NSString* _Nonnull blockNumber;
@end

@interface EthUrlParam : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) NSString* _Nonnull rpcUrl;
@property (nonatomic) NSString* _Nonnull wsUrl;
@end

@interface EthUtil : NSObject <goSeqRefInterface, BaseAddressUtil> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nullable instancetype)init;
/**
 * Warning: eth cannot support decode address to public key
 */
- (NSString* _Nonnull)decodeAddressToPublicKey:(NSString* _Nullable)address error:(NSError* _Nullable* _Nullable)error;
- (NSString* _Nonnull)encodePublicKeyToAddress:(NSString* _Nullable)publicKey error:(NSError* _Nullable* _Nullable)error;
/**
 * Check if address is 40 hexadecimal characters
 */
- (BOOL)isValidAddress:(NSString* _Nullable)address;
@end

/**
 * 默认gas limit估算失败后，21000 * 3 = 63000
 */
FOUNDATION_EXPORT NSString* _Nonnull const EthDEFAULT_CONTRACT_GAS_LIMIT;
/**
 * 默认gas limit估算失败后，21000 * 3 = 63000
 */
FOUNDATION_EXPORT NSString* _Nonnull const EthDEFAULT_ETH_GAS_LIMIT;
/**
 * 当前网络 standard gas price
 */
FOUNDATION_EXPORT NSString* _Nonnull const EthDEFAULT_ETH_GAS_PRICE;
FOUNDATION_EXPORT NSString* _Nonnull const EthERC20_METHOD_APPROVE;
/**
 * ERC20  交易method
 */
FOUNDATION_EXPORT NSString* _Nonnull const EthERC20_METHOD_TRANSFER;
/**
 * 合约 ABI json文件，查询ERC20 相关代币信息需要使用 ABI 文件
 */
FOUNDATION_EXPORT NSString* _Nonnull const EthErc20AbiStr;
FOUNDATION_EXPORT NSString* _Nonnull const EthRPAMethodClose;
FOUNDATION_EXPORT NSString* _Nonnull const EthRPAMethodCreate;
FOUNDATION_EXPORT NSString* _Nonnull const EthRPAMethodOpen;
FOUNDATION_EXPORT NSString* _Nonnull const EthRedPacketABI;

/**
 * Warning: eth cannot support decode address to public key
 */
FOUNDATION_EXPORT NSString* _Nonnull EthDecodeAddressToPublicKey(NSString* _Nullable address, NSError* _Nullable* _Nullable error);

// skipped function EncodeAbiData with unsupported parameter or return types


// skipped function EncodeErc20Approve with unsupported parameter or return types


/**
 * Encode erc20 transfer data
 */
FOUNDATION_EXPORT NSData* _Nullable EthEncodeErc20Transfer(NSString* _Nullable toAddress, NSString* _Nullable amount, NSError* _Nullable* _Nullable error);

FOUNDATION_EXPORT NSString* _Nonnull EthEncodePublicKeyToAddress(NSString* _Nullable publicKey, NSError* _Nullable* _Nullable error);

/**
 * We cannot use name `NewAccountWithPrivateKey`, because android not support.
 */
FOUNDATION_EXPORT EthAccount* _Nullable EthEthAccountWithPrivateKey(NSString* _Nullable privateKey, NSError* _Nullable* _Nullable error);

/**
 * 获取链ID
 */
FOUNDATION_EXPORT NSString* _Nonnull EthGetChainId(EthEthChain* _Nullable e, NSError* _Nullable* _Nullable error);

/**
 * 通过 rpcUrl, 获取 eth 的连接对象
 */
FOUNDATION_EXPORT EthEthChain* _Nullable EthGetConnection(NSString* _Nullable rpcUrl, NSError* _Nullable* _Nullable error);

/**
 * Check if address is 40 hexadecimal characters
 */
FOUNDATION_EXPORT BOOL EthIsValidAddress(NSString* _Nullable address);

/**
 * It will check based on eip55 rules
 */
FOUNDATION_EXPORT BOOL EthIsValidEIP55Address(NSString* _Nullable address);

FOUNDATION_EXPORT EthAccount* _Nullable EthNewAccountWithMnemonic(NSString* _Nullable mnemonic, NSError* _Nullable* _Nullable error);

/**
 * NewCallMsg creates an empty contract call parameter list.
 */
FOUNDATION_EXPORT EthCallMsg* _Nullable EthNewCallMsg(void);

FOUNDATION_EXPORT EthChain* _Nullable EthNewChainWithRpc(NSString* _Nullable rpcUrl);

/**
 * Deprecated: CoinUtil is deprecated. Please Use NewChainWithRpc() instead.
 */
FOUNDATION_EXPORT EthCoinUtil* _Nullable EthNewCoinUtilWithRpc(NSString* _Nullable rpcUrl, NSString* _Nullable contractAddress, NSString* _Nullable walletAddress);

FOUNDATION_EXPORT EthErc20Token* _Nullable EthNewErc20Token(EthChain* _Nullable chain, NSString* _Nullable contractAddress);

FOUNDATION_EXPORT EthEthChain* _Nullable EthNewEthChain(void);

/**
 * 结束红包领取 的操作
 */
FOUNDATION_EXPORT EthRedPacketAction* _Nullable EthNewRedPacketActionClose(int64_t packetId, NSString* _Nullable creator, NSError* _Nullable* _Nullable error);

/**
 * 用户发红包 的操作
 */
FOUNDATION_EXPORT EthRedPacketAction* _Nullable EthNewRedPacketActionCreate(NSString* _Nullable erc20TokenAddress, long count, NSString* _Nullable amount, NSError* _Nullable* _Nullable error);

// skipped function NewRedPacketActionOpen with unsupported parameter or return types


FOUNDATION_EXPORT EthRpcReachability* _Nullable EthNewRpcReachability(void);

FOUNDATION_EXPORT EthToken* _Nullable EthNewToken(EthChain* _Nullable chain);

FOUNDATION_EXPORT EthTransaction* _Nullable EthNewTransaction(NSString* _Nullable nonce, NSString* _Nullable gasPrice, NSString* _Nullable gasLimit, NSString* _Nullable to, NSString* _Nullable value, NSString* _Nullable data);

FOUNDATION_EXPORT EthTransaction* _Nullable EthNewTransactionFromHex(NSString* _Nullable hexData, NSError* _Nullable* _Nullable error);

FOUNDATION_EXPORT EthUtil* _Nullable EthNewUtil(void);

/**
 * 将MethodOpts 进行转化，由于端的限制，只能传入string字符
 */
FOUNDATION_EXPORT EthCallMethodOptsBigInt* _Nullable EthOptsTobigInt(EthCallMethodOpts* _Nullable opts);

/**
 * 私钥转地址
 */
FOUNDATION_EXPORT NSString* _Nonnull EthPrivateKeyToAddress(NSString* _Nullable privateKey, NSError* _Nullable* _Nullable error);

/**
 * 以太坊的 hash 专门在数据前面加上了一段话
 */
FOUNDATION_EXPORT NSData* _Nullable EthSignHashForMsg(NSString* _Nullable data);

FOUNDATION_EXPORT NSString* _Nonnull EthTransformEIP55Address(NSString* _Nullable address, NSError* _Nullable* _Nullable error);

FOUNDATION_EXPORT BOOL EthVerifySignature(NSString* _Nullable pubkey, NSString* _Nullable message, NSString* _Nullable signedMsg);

@class EthJsonable;

@class EthRpcReachabilityDelegate;

@class EthTokenProtocol;

/**
 * 支持 对象 和 json 字符串 相互转换
 */
@interface EthJsonable : NSObject <goSeqRefInterface, EthJsonable> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * 将对象转为 json 字符串
 */
- (NSString* _Nonnull)jsonString;
@end

@interface EthRpcReachabilityDelegate : NSObject <goSeqRefInterface, EthRpcReachabilityDelegate> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * A node request failed
 */
- (void)reachabilityDidFailNode:(EthRpcReachability* _Nullable)tester latency:(EthRpcLatency* _Nullable)latency;
/**
 * The entire network connection test task is over
@param overview Overview of the results of all connection tests
 */
- (void)reachabilityDidFinish:(EthRpcReachability* _Nullable)tester overview:(NSString* _Nullable)overview;
/**
 * A node has received a response
 */
- (void)reachabilityDidReceiveNode:(EthRpcReachability* _Nullable)tester latency:(EthRpcLatency* _Nullable)latency;
@end

@interface EthTokenProtocol : NSObject <goSeqRefInterface, EthTokenProtocol> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (BaseBalance* _Nullable)balanceOfAccount:(id<BaseAccount> _Nullable)account error:(NSError* _Nullable* _Nullable)error;
- (BaseBalance* _Nullable)balanceOfAddress:(NSString* _Nullable)address error:(NSError* _Nullable* _Nullable)error;
- (BaseBalance* _Nullable)balanceOfPublicKey:(NSString* _Nullable)publicKey error:(NSError* _Nullable* _Nullable)error;
- (BaseOptionalString* _Nullable)buildTransferTx:(NSString* _Nullable)privateKey transaction:(EthTransaction* _Nullable)transaction error:(NSError* _Nullable* _Nullable)error;
- (BaseOptionalString* _Nullable)buildTransferTxWithAccount:(EthAccount* _Nullable)account transaction:(EthTransaction* _Nullable)transaction error:(NSError* _Nullable* _Nullable)error;
- (id<BaseChain> _Nullable)chain;
/**
 * need `fromAddress`, `receiverAddress`, `gasPrice`, `gasLimit`, `amount`
 */
- (EthOptimismLayer2Gas* _Nullable)estimateGasFeeLayer2:(EthCallMsg* _Nullable)msg error:(NSError* _Nullable* _Nullable)error;
- (NSString* _Nonnull)estimateGasLimit:(NSString* _Nullable)fromAddress receiverAddress:(NSString* _Nullable)receiverAddress gasPrice:(NSString* _Nullable)gasPrice amount:(NSString* _Nullable)amount error:(NSError* _Nullable* _Nullable)error;
- (BaseTokenInfo* _Nullable)tokenInfo:(NSError* _Nullable* _Nullable)error;
@end

#endif
