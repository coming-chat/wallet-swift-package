// Objective-C API for talking to github.com/coming-chat/wallet-SDK/core/btc Go package.
//   gobind -lang=objc github.com/coming-chat/wallet-SDK/core/btc
//
// File is generated by gobind. Do not edit.

#ifndef __Btc_H__
#define __Btc_H__

@import Foundation;
#include "ref.h"
#include "Universe.objc.h"

#include "Base.objc.h"

@class BtcAccount;
@class BtcBrc20Inscription;
@class BtcBrc20InscriptionPage;
@class BtcBrc20Token;
@class BtcBrc20TokenBalance;
@class BtcBrc20TokenBalancePage;
@class BtcBrc20TokenInfo;
@class BtcChain;
@class BtcFeeRate;
@class BtcNFTPage;
@class BtcUtil;

@interface BtcAccount : NSObject <goSeqRefInterface, BaseAccount, BaseAddressUtil> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nullable instancetype)initWithMnemonic:(NSString* _Nullable)mnemonic chainnet:(NSString* _Nullable)chainnet;
@property (nonatomic) NSString* _Nonnull chainnet;
/**
 * @return default is the mainnet address
 */
- (NSString* _Nonnull)address;
/**
 * @return publicKey that will start with 0x.
 */
- (NSString* _Nonnull)decodeAddressToPublicKey:(NSString* _Nullable)address error:(NSError* _Nullable* _Nullable)error;
- (BtcAccount* _Nullable)deriveAccountAt:(NSString* _Nullable)chainnet error:(NSError* _Nullable* _Nullable)error;
/**
 * @param publicKey can start with 0x or not.
 */
- (NSString* _Nonnull)encodePublicKeyToAddress:(NSString* _Nullable)publicKey error:(NSError* _Nullable* _Nullable)error;
- (BOOL)isValidAddress:(NSString* _Nullable)address;
/**
 * @return privateKey data
 */
- (NSData* _Nullable)privateKey:(NSError* _Nullable* _Nullable)error;
/**
 * @return privateKey string that will start with 0x.
 */
- (NSString* _Nonnull)privateKeyHex:(NSError* _Nullable* _Nullable)error;
/**
 * @return publicKey data
 */
- (NSData* _Nullable)publicKey;
/**
 * @return publicKey string that will start with 0x.
 */
- (NSString* _Nonnull)publicKeyHex;
/**
 * TODO: function not implement yet.
 */
- (NSData* _Nullable)sign:(NSData* _Nullable)message password:(NSString* _Nullable)password error:(NSError* _Nullable* _Nullable)error;
/**
 * TODO: function not implement yet.
 */
- (BaseOptionalString* _Nullable)signHex:(NSString* _Nullable)messageHex password:(NSString* _Nullable)password error:(NSError* _Nullable* _Nullable)error;
@end

@interface BtcBrc20Inscription : NSObject <goSeqRefInterface, BaseAniable, BaseJsonable> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nullable instancetype)initWithJsonString:(NSString* _Nullable)str;
@property (nonatomic) NSString* _Nonnull inscriptionId;
@property (nonatomic) int64_t inscriptionNumber;
@property (nonatomic) NSString* _Nonnull address;
@property (nonatomic) int64_t outputValue;
@property (nonatomic) NSString* _Nonnull preview;
@property (nonatomic) NSString* _Nonnull content;
@property (nonatomic) int64_t contentLength;
@property (nonatomic) NSString* _Nonnull contentType;
@property (nonatomic) NSString* _Nonnull contentBody;
@property (nonatomic) int64_t timestamp;
@property (nonatomic) NSString* _Nonnull genesisTransaction;
@property (nonatomic) NSString* _Nonnull location;
@property (nonatomic) NSString* _Nonnull output;
/**
 * only has value if the content type starts with 'text/'
 */
@property (nonatomic) NSString* _Nonnull contentText;
- (BaseAny* _Nullable)asAny;
- (BaseNFT* _Nullable)asNFT;
- (BaseOptionalString* _Nullable)jsonString:(NSError* _Nullable* _Nullable)error;
@end

@interface BtcBrc20InscriptionPage : NSObject <goSeqRefInterface, BaseJsonable, BasePageable> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nullable instancetype)initWithJsonString:(NSString* _Nullable)str;
// skipped field Brc20InscriptionPage.SdkPageable with unsupported type: *github.com/coming-chat/wallet-SDK/core/base/inter.SdkPageable[*github.com/coming-chat/wallet-SDK/core/btc.Brc20Inscription]

- (BtcNFTPage* _Nullable)asNFTPage;
- (long)currentCount;
- (NSString* _Nonnull)currentCursor;
- (BOOL)hasNextPage;
- (BaseAnyArray* _Nullable)itemArray;
- (BtcBrc20Inscription* _Nullable)itemAt:(long)index;
- (BaseOptionalString* _Nullable)jsonString:(NSError* _Nullable* _Nullable)error;
- (long)totalCount;
@end

@interface BtcBrc20Token : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nullable instancetype)init:(NSString* _Nullable)ticker;
@property (nonatomic) NSString* _Nonnull ticker;
// skipped method Brc20Token.BalanceOfAccount with unsupported parameter or return types

- (BaseBalance* _Nullable)balanceOfAddress:(NSString* _Nullable)address error:(NSError* _Nullable* _Nullable)error;
- (BaseBalance* _Nullable)balanceOfPublicKey:(NSString* _Nullable)publicKey error:(NSError* _Nullable* _Nullable)error;
- (id<BaseTransaction> _Nullable)buildTransfer:(NSString* _Nullable)sender receiver:(NSString* _Nullable)receiver amount:(NSString* _Nullable)amount error:(NSError* _Nullable* _Nullable)error;
- (id<BaseTransaction> _Nullable)buildTransferAll:(NSString* _Nullable)sender receiver:(NSString* _Nullable)receiver error:(NSError* _Nullable* _Nullable)error;
/**
 * Before invoking this method, it is best to check `CanTransferAll()`
 */
- (BOOL)canTransferAll;
- (id<BaseChain> _Nullable)chain;
- (BtcBrc20TokenInfo* _Nullable)fullTokenInfo:(NSError* _Nullable* _Nullable)error;
- (BaseTokenInfo* _Nullable)tokenInfo:(NSError* _Nullable* _Nullable)error;
@end

@interface BtcBrc20TokenBalance : NSObject <goSeqRefInterface, BaseAniable, BaseJsonable> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nullable instancetype)initWithJsonString:(NSString* _Nullable)str;
@property (nonatomic) NSString* _Nonnull ticker;
@property (nonatomic) NSString* _Nonnull overallBalance;
@property (nonatomic) NSString* _Nonnull transferableBalance;
@property (nonatomic) NSString* _Nonnull availableBalance;
- (BaseAny* _Nullable)asAny;
- (BaseOptionalString* _Nullable)jsonString:(NSError* _Nullable* _Nullable)error;
@end

@interface BtcBrc20TokenBalancePage : NSObject <goSeqRefInterface, BaseJsonable, BasePageable> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nullable instancetype)initWithJsonString:(NSString* _Nullable)str;
// skipped field Brc20TokenBalancePage.SdkPageable with unsupported type: *github.com/coming-chat/wallet-SDK/core/base/inter.SdkPageable[*github.com/coming-chat/wallet-SDK/core/btc.Brc20TokenBalance]

- (long)currentCount;
- (NSString* _Nonnull)currentCursor;
- (BOOL)hasNextPage;
- (BaseAnyArray* _Nullable)itemArray;
- (BtcBrc20TokenBalance* _Nullable)itemAt:(long)index;
- (BaseOptionalString* _Nullable)jsonString:(NSError* _Nullable* _Nullable)error;
- (long)totalCount;
@end

@interface BtcBrc20TokenInfo : NSObject <goSeqRefInterface, BaseJsonable> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nullable instancetype)initWithJsonString:(NSString* _Nullable)str;
@property (nonatomic) NSString* _Nonnull ticker;
@property (nonatomic) int64_t holdersCount;
@property (nonatomic) int64_t historyCount;
@property (nonatomic) int64_t inscriptionNumber;
@property (nonatomic) NSString* _Nonnull inscriptionId;
@property (nonatomic) NSString* _Nonnull max;
@property (nonatomic) NSString* _Nonnull limit;
@property (nonatomic) NSString* _Nonnull minted;
@property (nonatomic) NSString* _Nonnull totalMinted;
@property (nonatomic) NSString* _Nonnull confirmedMinted;
@property (nonatomic) NSString* _Nonnull confirmedMinted1h;
@property (nonatomic) NSString* _Nonnull confirmedMinted24h;
@property (nonatomic) int64_t mintTimes;
@property (nonatomic) int16_t decimal;
@property (nonatomic) NSString* _Nonnull creator;
@property (nonatomic) NSString* _Nonnull txid;
@property (nonatomic) int64_t deployHeight;
@property (nonatomic) int64_t deployBlocktime;
@property (nonatomic) int64_t completeHeight;
@property (nonatomic) int64_t completeBlocktime;
@property (nonatomic) int64_t inscriptionNumberStart;
@property (nonatomic) int64_t inscriptionNumberEnd;
- (BaseOptionalString* _Nullable)jsonString:(NSError* _Nullable* _Nullable)error;
@end

@interface BtcChain : NSObject <goSeqRefInterface, BaseAddressUtil, BaseChain, BaseToken> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nullable instancetype)initWithChainnet:(NSString* _Nullable)chainnet;
@property (nonatomic) BtcUtil* _Nullable util;
- (BaseBalance* _Nullable)balanceOfAccount:(id<BaseAccount> _Nullable)account error:(NSError* _Nullable* _Nullable)error;
- (BaseBalance* _Nullable)balanceOfAddress:(NSString* _Nullable)address error:(NSError* _Nullable* _Nullable)error;
- (BaseBalance* _Nullable)balanceOfPublicKey:(NSString* _Nullable)publicKey error:(NSError* _Nullable* _Nullable)error;
- (NSString* _Nonnull)batchFetchTransactionStatus:(NSString* _Nullable)hashListString;
- (id<BaseTransaction> _Nullable)buildTransfer:(NSString* _Nullable)sender receiver:(NSString* _Nullable)receiver amount:(NSString* _Nullable)amount error:(NSError* _Nullable* _Nullable)error;
- (id<BaseTransaction> _Nullable)buildTransferAll:(NSString* _Nullable)sender receiver:(NSString* _Nullable)receiver error:(NSError* _Nullable* _Nullable)error;
- (BOOL)canTransferAll;
- (id<BaseChain> _Nullable)chain;
- (NSString* _Nonnull)decodeAddressToPublicKey:(NSString* _Nullable)address error:(NSError* _Nullable* _Nullable)error;
- (NSString* _Nonnull)encodePublicDataToAddress:(NSData* _Nullable)public error:(NSError* _Nullable* _Nullable)error;
- (NSString* _Nonnull)encodePublicKeyToAddress:(NSString* _Nullable)publicKey error:(NSError* _Nullable* _Nullable)error;
- (BaseOptionalString* _Nullable)estimateTransactionFee:(id<BaseTransaction> _Nullable)transaction error:(NSError* _Nullable* _Nullable)error;
- (BaseOptionalString* _Nullable)estimateTransactionFeeUsePublicKey:(id<BaseTransaction> _Nullable)transaction pubkey:(NSString* _Nullable)pubkey error:(NSError* _Nullable* _Nullable)error;
/**
 * Fetch transaction details through transaction hash
Note: The input parsing of bitcoin is very complex and the network cost is relatively high,
So only the status and timestamp can be queried.
 */
- (BaseTransactionDetail* _Nullable)fetchTransactionDetail:(NSString* _Nullable)hash error:(NSError* _Nullable* _Nullable)error;
- (long)fetchTransactionStatus:(NSString* _Nullable)hash;
- (BOOL)isValidAddress:(NSString* _Nullable)address;
- (id<BaseToken> _Nullable)mainToken;
/**
 * Send the raw transaction on-chain
@return the hex hash string
 */
- (NSString* _Nonnull)sendRawTransaction:(NSString* _Nullable)signedTx error:(NSError* _Nullable* _Nullable)error;
- (BaseTokenInfo* _Nullable)tokenInfo:(NSError* _Nullable* _Nullable)error;
@end

@interface BtcFeeRate : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) int64_t low;
@property (nonatomic) int64_t average;
@property (nonatomic) int64_t high;
@end

@interface BtcNFTPage : NSObject <goSeqRefInterface, BaseJsonable, BasePageable> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
// skipped field NFTPage.SdkPageable with unsupported type: *github.com/coming-chat/wallet-SDK/core/base/inter.SdkPageable[*github.com/coming-chat/wallet-SDK/core/base.NFT]

- (long)currentCount;
- (NSString* _Nonnull)currentCursor;
- (BOOL)hasNextPage;
- (BaseAnyArray* _Nullable)itemArray;
- (BaseNFT* _Nullable)itemAt:(long)index;
- (BaseOptionalString* _Nullable)jsonString:(NSError* _Nullable* _Nullable)error;
- (long)totalCount;
@end

@interface BtcUtil : NSObject <goSeqRefInterface, BaseAddressUtil> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nullable instancetype)initWithChainnet:(NSString* _Nullable)chainnet;
@property (nonatomic) NSString* _Nonnull chainnet;
/**
 * Warning: Btc cannot support decode address to public key
 */
- (NSString* _Nonnull)decodeAddressToPublicKey:(NSString* _Nullable)address error:(NSError* _Nullable* _Nullable)error;
- (NSString* _Nonnull)encodePublicDataToAddress:(NSData* _Nullable)public error:(NSError* _Nullable* _Nullable)error;
/**
 * @param publicKey can start with 0x or not.
 */
- (NSString* _Nonnull)encodePublicKeyToAddress:(NSString* _Nullable)publicKey error:(NSError* _Nullable* _Nullable)error;
- (BOOL)isValidAddress:(NSString* _Nullable)address;
@end

/**
 * ComingChat used, similar mainnet's alias.
 */
FOUNDATION_EXPORT NSString* _Nonnull const BtcChainBitcoin;
FOUNDATION_EXPORT NSString* _Nonnull const BtcChainMainnet;
FOUNDATION_EXPORT NSString* _Nonnull const BtcChainSignet;

@interface Btc : NSObject
+ (NSError* _Nullable) errDecodeAddress;
+ (void) setErrDecodeAddress:(NSError* _Nullable)v;

+ (NSError* _Nullable) errHttpResponseParse;
+ (void) setErrHttpResponseParse:(NSError* _Nullable)v;

+ (NSError* _Nullable) errUnsupportedChain;
+ (void) setErrUnsupportedChain:(NSError* _Nullable)v;

@end

FOUNDATION_EXPORT BtcAccount* _Nullable BtcAccountWithPrivateKey(NSString* _Nullable prikey, NSString* _Nullable chainnet, NSError* _Nullable* _Nullable error);

FOUNDATION_EXPORT BtcAccount* _Nullable BtcAsBitcoinAccount(id<BaseAccount> _Nullable account);

FOUNDATION_EXPORT BtcBrc20Inscription* _Nullable BtcAsBrc20Inscription(BaseAny* _Nullable a);

FOUNDATION_EXPORT BtcBrc20TokenBalance* _Nullable BtcAsBrc20TokenBalance(BaseAny* _Nullable a);

FOUNDATION_EXPORT NSString* _Nonnull BtcEncodePublicDataToAddress(NSData* _Nullable public, NSString* _Nullable chainnet, NSError* _Nullable* _Nullable error);

/**
 * @param publicKey can start with 0x or not.
 */
FOUNDATION_EXPORT NSString* _Nonnull BtcEncodePublicKeyToAddress(NSString* _Nullable publicKey, NSString* _Nullable chainnet, NSError* _Nullable* _Nullable error);

FOUNDATION_EXPORT BtcBrc20InscriptionPage* _Nullable BtcFetchBrc20Inscription(NSString* _Nullable owner, NSString* _Nullable cursor, long pageSize, NSError* _Nullable* _Nullable error);

FOUNDATION_EXPORT BtcBrc20TokenBalancePage* _Nullable BtcFetchBrc20TokenBalance(NSString* _Nullable owner, NSString* _Nullable cursor, long pageSize, NSError* _Nullable* _Nullable error);

/**
 * Deprecated: FetchTransactionDetail is deprecated. Please Use Chain.FetchTransactionDetail() instead.
 */
FOUNDATION_EXPORT BaseTransactionDetail* _Nullable BtcFetchTransactionDetail(NSString* _Nullable hashString, NSString* _Nullable chainnet, NSError* _Nullable* _Nullable error);

/**
 * Deprecated: FetchTransactionStatus is deprecated. Please Use Chain.FetchTransactionStatus() instead.
 */
FOUNDATION_EXPORT long BtcFetchTransactionStatus(NSString* _Nullable hashString, NSString* _Nullable chainnet);

/**
 * @param chainnet chain name
 */
FOUNDATION_EXPORT BOOL BtcIsValidAddress(NSString* _Nullable address, NSString* _Nullable chainnet);

FOUNDATION_EXPORT BtcAccount* _Nullable BtcNewAccountWithMnemonic(NSString* _Nullable mnemonic, NSString* _Nullable chainnet, NSError* _Nullable* _Nullable error);

FOUNDATION_EXPORT BtcBrc20InscriptionPage* _Nullable BtcNewBrc20InscriptionPageWithJsonString(NSString* _Nullable str, NSError* _Nullable* _Nullable error);

FOUNDATION_EXPORT BtcBrc20Inscription* _Nullable BtcNewBrc20InscriptionWithJsonString(NSString* _Nullable str, NSError* _Nullable* _Nullable error);

FOUNDATION_EXPORT BtcBrc20Token* _Nullable BtcNewBrc20Token(NSString* _Nullable ticker);

FOUNDATION_EXPORT BtcBrc20TokenBalancePage* _Nullable BtcNewBrc20TokenBalancePageWithJsonString(NSString* _Nullable str, NSError* _Nullable* _Nullable error);

FOUNDATION_EXPORT BtcBrc20TokenBalance* _Nullable BtcNewBrc20TokenBalanceWithJsonString(NSString* _Nullable str, NSError* _Nullable* _Nullable error);

FOUNDATION_EXPORT BtcBrc20TokenInfo* _Nullable BtcNewBrc20TokenInfoWithJsonString(NSString* _Nullable str, NSError* _Nullable* _Nullable error);

FOUNDATION_EXPORT BtcChain* _Nullable BtcNewChainWithChainnet(NSString* _Nullable chainnet, NSError* _Nullable* _Nullable error);

FOUNDATION_EXPORT BtcUtil* _Nullable BtcNewUtilWithChainnet(NSString* _Nullable chainnet, NSError* _Nullable* _Nullable error);

/**
 * Deprecated: QueryBalance is deprecated. Please Use Chain.QueryBalanceWithAddress() instead.
 */
FOUNDATION_EXPORT NSString* _Nonnull BtcQueryBalance(NSString* _Nullable address, NSString* _Nullable chainnet, NSError* _Nullable* _Nullable error);

/**
 * Deprecated: QueryBalancePubkey is deprecated. Please Use Chain.QueryBalanceWithPublicKey() instead.
 */
FOUNDATION_EXPORT NSString* _Nonnull BtcQueryBalancePubkey(NSString* _Nullable pubkey, NSString* _Nullable chainnet, NSError* _Nullable* _Nullable error);

/**
 * Deprecated: SdkBatchTransactionStatus is deprecated. Please Use Chain.BatchFetchTransactionStatus() instead.
 */
FOUNDATION_EXPORT NSString* _Nonnull BtcSdkBatchTransactionStatus(NSString* _Nullable hashListString, NSString* _Nullable chainnet);

/**
 * Deprecated: SendRawTransaction is deprecated. Please Use Chain.SendRawTransaction() instead.
 */
FOUNDATION_EXPORT NSString* _Nonnull BtcSendRawTransaction(NSString* _Nullable signedTx, NSString* _Nullable chainnet, NSError* _Nullable* _Nullable error);

FOUNDATION_EXPORT BtcFeeRate* _Nullable BtcSuggestFeeRate(NSError* _Nullable* _Nullable error);

#endif
