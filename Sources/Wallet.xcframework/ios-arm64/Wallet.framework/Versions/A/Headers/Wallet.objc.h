// Objective-C API for talking to github.com/coming-chat/wallet-SDK/core/wallet Go package.
//   gobind -lang=objc github.com/coming-chat/wallet-SDK/core/wallet
//
// File is generated by gobind. Do not edit.

#ifndef __Wallet_H__
#define __Wallet_H__

@import Foundation;
#include "ref.h"
#include "Universe.objc.h"

#include "Aptos.objc.h"
#include "Btc.objc.h"
#include "Cosmos.objc.h"
#include "Doge.objc.h"
#include "Eth.objc.h"
#include "Polka.objc.h"
#include "Solana.objc.h"

@class WalletWallet;

@interface WalletWallet : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * Only support Polka keystore.
 */
- (nullable instancetype)initWithKeyStore:(NSString* _Nullable)keyStoreJson password:(NSString* _Nullable)password;
- (nullable instancetype)initWithMnemonic:(NSString* _Nullable)mnemonic;
@property (nonatomic) NSString* _Nonnull mnemonic;
@property (nonatomic) NSString* _Nonnull keystore;
/**
 * check keystore password
 */
- (BOOL)checkPassword:(NSString* _Nullable)password ret0_:(BOOL* _Nullable)ret0_ error:(NSError* _Nullable* _Nullable)error;
/**
 * Deprecated: GetAddress is deprecated. Please use wallet.PolkaAccount(network).Address() instead
 */
- (NSString* _Nonnull)getAddress:(long)network error:(NSError* _Nullable* _Nullable)error;
/**
 * Get or create the ethereum account.
 */
- (AptosAccount* _Nullable)getOrCreateAptosAccount:(NSError* _Nullable* _Nullable)error;
/**
 * Get or create the bitcoin account with specified chainnet.
 */
- (BtcAccount* _Nullable)getOrCreateBitcoinAccount:(NSString* _Nullable)chainnet error:(NSError* _Nullable* _Nullable)error;
/**
 * Get or create cosmos chain account
 */
- (CosmosAccount* _Nullable)getOrCreateCosmosAccount:(NSError* _Nullable* _Nullable)error;
/**
 * Get or create a wallet account based on cosmos architecture.
 */
- (CosmosAccount* _Nullable)getOrCreateCosmosTypeAccount:(int64_t)cointype addressPrefix:(NSString* _Nullable)addressPrefix error:(NSError* _Nullable* _Nullable)error;
- (DogeAccount* _Nullable)getOrCreateDogeAccount:(NSString* _Nullable)chainnet error:(NSError* _Nullable* _Nullable)error;
/**
 * Get or create the ethereum account.
 */
- (EthAccount* _Nullable)getOrCreateEthereumAccount:(NSError* _Nullable* _Nullable)error;
/**
 * Get or create the polka account with specified network.
 */
- (PolkaAccount* _Nullable)getOrCreatePolkaAccount:(long)network error:(NSError* _Nullable* _Nullable)error;
/**
 * Get or create the ethereum account.
 */
- (SolanaAccount* _Nullable)getOrCreateSolanaAccount:(NSError* _Nullable* _Nullable)error;
/**
 * Deprecated: GetPrivateKeyHex is deprecated. Please use wallet.PolkaAccount(network).PrivateKey() instead
 */
- (NSString* _Nonnull)getPrivateKeyHex:(NSError* _Nullable* _Nullable)error;
/**
 * Deprecated: GetPublicKey is deprecated. Please use wallet.PolkaAccount(network).PublicKey() instead
 */
- (NSData* _Nullable)getPublicKey:(NSError* _Nullable* _Nullable)error;
/**
 * Deprecated: GetPublicKeyHex is deprecated. Please use wallet.PolkaAccount(network).PublicKey() instead
 */
- (NSString* _Nonnull)getPublicKeyHex:(NSError* _Nullable* _Nullable)error;
- (BOOL)isKeystoreWallet;
- (BOOL)isMnemonicWallet;
/**
 * Deprecated: Sign is deprecated. Please use wallet.PolkaAccount(network).Sign() instead
 */
- (NSData* _Nullable)sign:(NSData* _Nullable)message password:(NSString* _Nullable)password error:(NSError* _Nullable* _Nullable)error;
/**
 * Deprecated: SignFromHex is deprecated. Please use wallet.PolkaAccount(network).SignHex() instead
 */
- (NSData* _Nullable)signFromHex:(NSString* _Nullable)messageHex password:(NSString* _Nullable)password error:(NSError* _Nullable* _Nullable)error;
@end

@interface Wallet : NSObject
+ (NSError* _Nullable) errInvalidMnemonic;
+ (void) setErrInvalidMnemonic:(NSError* _Nullable)v;

@end

FOUNDATION_EXPORT NSString* _Nonnull WalletByteToHex(NSData* _Nullable data);

FOUNDATION_EXPORT NSString* _Nonnull WalletGenMnemonic(NSError* _Nullable* _Nullable error);

FOUNDATION_EXPORT NSData* _Nullable WalletHexToByte(NSString* _Nullable hex, NSError* _Nullable* _Nullable error);

FOUNDATION_EXPORT BOOL WalletIsValidMnemonic(NSString* _Nullable mnemonic);

/**
 * Only support Polka keystore.
 */
FOUNDATION_EXPORT WalletWallet* _Nullable WalletNewWalletWithKeyStore(NSString* _Nullable keyStoreJson, NSString* _Nullable password, NSError* _Nullable* _Nullable error);

FOUNDATION_EXPORT WalletWallet* _Nullable WalletNewWalletWithMnemonic(NSString* _Nullable mnemonic, NSError* _Nullable* _Nullable error);

#endif
