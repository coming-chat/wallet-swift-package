// Objective-C API for talking to github.com/coming-chat/wallet-SDK/core/wallet Go package.
//   gobind -lang=objc github.com/coming-chat/wallet-SDK/core/wallet
//
// File is generated by gobind. Do not edit.

#ifndef __Wallet_H__
#define __Wallet_H__

@import Foundation;
#include "ref.h"
#include "Universe.objc.h"

#include "Base.objc.h"
#include "Aptos.objc.h"
#include "Btc.objc.h"
#include "Cosmos.objc.h"
#include "Doge.objc.h"
#include "Eth.objc.h"
#include "Polka.objc.h"
#include "Solana.objc.h"
#include "Starcoin.objc.h"
#include "Sui.objc.h"

@class WalletAccountInfo;
@class WalletWallet;
@class WalletWatchAccount;
@protocol WalletWalletInfoProvider;
@class WalletWalletInfoProvider;

@protocol WalletWalletInfoProvider <NSObject>
- (NSString* _Nonnull)keystore:(NSString* _Nullable)walletId;
- (NSString* _Nonnull)mnemonic:(NSString* _Nullable)walletId;
- (NSString* _Nonnull)password:(NSString* _Nullable)walletId;
- (NSString* _Nonnull)privateKey:(NSString* _Nullable)walletId;
@end

@interface WalletAccountInfo : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
- (id<BaseAccount> _Nullable)account:(NSError* _Nullable* _Nullable)error;
- (NSString* _Nonnull)address;
- (NSString* _Nonnull)privateKeyHex:(NSError* _Nullable* _Nullable)error;
- (NSString* _Nonnull)publicKeyHex;
@end

@interface WalletWallet : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * Deprecated: 这个方法会缓存助记词、密码、私钥等信息，继续使用有泄露资产的风险 ⚠️
 */
- (nullable instancetype)initWithKeyStore:(NSString* _Nullable)keyStoreJson password:(NSString* _Nullable)password;
/**
 * Deprecated: 这个方法会缓存助记词、密码、私钥等信息，继续使用有泄露资产的风险 ⚠️
 */
- (nullable instancetype)initWithMnemonic:(NSString* _Nullable)mnemonic;
@property (nonatomic) NSString* _Nonnull mnemonic;
@property (nonatomic) NSString* _Nonnull keystore;
@property (nonatomic) NSString* _Nonnull watchAddress;
@property (nonatomic) NSString* _Nonnull walletId;
- (WalletAccountInfo* _Nullable)aptosAccountInfo;
- (WalletAccountInfo* _Nullable)bitcoinAccountInfo:(NSString* _Nullable)chainnet;
/**
 * check keystore password
 */
- (BOOL)checkPassword:(NSString* _Nullable)password ret0_:(BOOL* _Nullable)ret0_ error:(NSError* _Nullable* _Nullable)error;
- (WalletAccountInfo* _Nullable)cosmosAccountInfo:(int64_t)cointype prefix:(NSString* _Nullable)prefix;
- (WalletAccountInfo* _Nullable)dogecoinAccountInfo:(NSString* _Nullable)chainnet;
- (WalletAccountInfo* _Nullable)ethereumAccountInfo;
/**
 * Deprecated: GetAddress is deprecated. Please use wallet.PolkaAccount(network).Address() instead
 */
- (NSString* _Nonnull)getAddress:(long)network error:(NSError* _Nullable* _Nullable)error;
/**
 * Deprecated: use `AptosAccountInfo()`
Get or create the aptos account.
 */
- (AptosAccount* _Nullable)getOrCreateAptosAccount:(NSError* _Nullable* _Nullable)error;
/**
 * Deprecated: use `BitcoinAccountInfo(chainnet)`
Get or create the bitcoin account with specified chainnet.
 */
- (BtcAccount* _Nullable)getOrCreateBitcoinAccount:(NSString* _Nullable)chainnet error:(NSError* _Nullable* _Nullable)error;
/**
 * Deprecated: use `CosmosAccountInfo(cointype, prefix)`
Get or create cosmos chain account
 */
- (CosmosAccount* _Nullable)getOrCreateCosmosAccount:(NSError* _Nullable* _Nullable)error;
/**
 * Deprecated: use `CosmosAccountInfo(cointype, prefix)`
Get or create a wallet account based on cosmos architecture.
 */
- (CosmosAccount* _Nullable)getOrCreateCosmosTypeAccount:(int64_t)cointype addressPrefix:(NSString* _Nullable)addressPrefix error:(NSError* _Nullable* _Nullable)error;
/**
 * Deprecated: use `DogecoinAccountInfo(chainnet)`
 */
- (DogeAccount* _Nullable)getOrCreateDogeAccount:(NSString* _Nullable)chainnet error:(NSError* _Nullable* _Nullable)error;
/**
 * Deprecated: use `EthereumAccountInfo()`
Get or create the ethereum account.
 */
- (EthAccount* _Nullable)getOrCreateEthereumAccount:(NSError* _Nullable* _Nullable)error;
/**
 * Deprecated: use `PolkaAccountInfo(network)`
Get or create the polka account with specified network.
 */
- (PolkaAccount* _Nullable)getOrCreatePolkaAccount:(long)network error:(NSError* _Nullable* _Nullable)error;
/**
 * Deprecated: use `SolanaAccountInfo()`
Get or create the solana account.
 */
- (SolanaAccount* _Nullable)getOrCreateSolanaAccount:(NSError* _Nullable* _Nullable)error;
/**
 * Deprecated: use `StarcoinAccountInfo()`
Get or create the starcoin account.
 */
- (StarcoinAccount* _Nullable)getOrCreateStarcoinAccount:(NSError* _Nullable* _Nullable)error;
/**
 * Deprecated: use `SuiAccountInfo()`
Get or create the sui account.
 */
- (SuiAccount* _Nullable)getOrCreateSuiAccount:(NSError* _Nullable* _Nullable)error;
/**
 * Deprecated: GetPrivateKeyHex is deprecated. Please use wallet.PolkaAccount(network).PrivateKey() instead
 */
- (NSString* _Nonnull)getPrivateKeyHex:(NSError* _Nullable* _Nullable)error;
/**
 * Deprecated: GetPublicKey is deprecated. Please use wallet.PolkaAccount(network).PublicKey() instead
 */
- (NSData* _Nullable)getPublicKey:(NSError* _Nullable* _Nullable)error;
/**
 * Deprecated: GetPublicKeyHex is deprecated. Please use wallet.PolkaAccount(network).PublicKey() instead
 */
- (NSString* _Nonnull)getPublicKeyHex:(NSError* _Nullable* _Nullable)error;
- (WalletWatchAccount* _Nullable)getWatchWallet;
- (BOOL)isKeystoreWallet;
- (BOOL)isMnemonicWallet;
- (BOOL)isWatchWallet;
- (WalletAccountInfo* _Nullable)polkaAccountInfo:(long)network;
/**
 * Deprecated: Sign is deprecated. Please use wallet.PolkaAccount(network).Sign() instead
 */
- (NSData* _Nullable)sign:(NSData* _Nullable)message password:(NSString* _Nullable)password error:(NSError* _Nullable* _Nullable)error;
/**
 * Deprecated: SignFromHex is deprecated. Please use wallet.PolkaAccount(network).SignHex() instead
 */
- (NSData* _Nullable)signFromHex:(NSString* _Nullable)messageHex password:(NSString* _Nullable)password error:(NSError* _Nullable* _Nullable)error;
- (WalletAccountInfo* _Nullable)solanaAccountInfo;
- (WalletAccountInfo* _Nullable)starcoinAccountInfo;
- (WalletAccountInfo* _Nullable)suiAccountInfo;
- (long)walletType;
@end

@interface WalletWatchAccount : NSObject <goSeqRefInterface, BaseAccount> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
- (NSString* _Nonnull)address;
- (NSData* _Nullable)privateKey:(NSError* _Nullable* _Nullable)error;
- (NSString* _Nonnull)privateKeyHex:(NSError* _Nullable* _Nullable)error;
- (NSData* _Nullable)publicKey;
- (NSString* _Nonnull)publicKeyHex;
- (NSData* _Nullable)sign:(NSData* _Nullable)message password:(NSString* _Nullable)password error:(NSError* _Nullable* _Nullable)error;
- (BaseOptionalString* _Nullable)signHex:(NSString* _Nullable)messageHex password:(NSString* _Nullable)password error:(NSError* _Nullable* _Nullable)error;
@end

FOUNDATION_EXPORT NSString* _Nonnull const WalletChainTypeBitcoin;
FOUNDATION_EXPORT NSString* _Nonnull const WalletChainTypeCosmos;
/**
 * contains ethereum, bsc, chainx_eth, polygon...
 */
FOUNDATION_EXPORT NSString* _Nonnull const WalletChainTypeEthereum;
FOUNDATION_EXPORT NSString* _Nonnull const WalletChainTypeSolana;
FOUNDATION_EXPORT const long WalletWalletTypeError;
FOUNDATION_EXPORT const long WalletWalletTypeKeystore;
FOUNDATION_EXPORT const long WalletWalletTypeMnemonic;
FOUNDATION_EXPORT const long WalletWalletTypePrivateKey;

@interface Wallet : NSObject
+ (NSError* _Nullable) errInvalidMnemonic;
+ (void) setErrInvalidMnemonic:(NSError* _Nullable)v;

+ (NSError* _Nullable) errUnsupportKeystore;
+ (void) setErrUnsupportKeystore:(NSError* _Nullable)v;

+ (NSError* _Nullable) errWalletInfoNotExist;
+ (void) setErrWalletInfoNotExist:(NSError* _Nullable)v;

+ (NSError* _Nullable) errWalletInfoUnspecified;
+ (void) setErrWalletInfoUnspecified:(NSError* _Nullable)v;

+ (id<WalletWalletInfoProvider> _Nullable) infoProvider;
+ (void) setInfoProvider:(id<WalletWalletInfoProvider> _Nullable)v;

@end

FOUNDATION_EXPORT NSString* _Nonnull WalletByteToHex(NSData* _Nullable data);

FOUNDATION_EXPORT BaseStringArray* _Nullable WalletChainTypeFrom(NSString* _Nullable address);

FOUNDATION_EXPORT NSString* _Nonnull WalletGenMnemonic(NSError* _Nullable* _Nullable error);

FOUNDATION_EXPORT WalletAccountInfo* _Nullable WalletGetAccountInfo(NSString* _Nullable walletId, NSString* _Nullable cacheKey);

FOUNDATION_EXPORT WalletWallet* _Nullable WalletGetWallet(NSString* _Nullable walletId);

FOUNDATION_EXPORT NSData* _Nullable WalletHexToByte(NSString* _Nullable hex, NSError* _Nullable* _Nullable error);

FOUNDATION_EXPORT BOOL WalletIsValidMnemonic(NSString* _Nullable mnemonic);

/**
 * Deprecated: 这个方法会缓存助记词、密码、私钥等信息，继续使用有泄露资产的风险 ⚠️
 */
FOUNDATION_EXPORT WalletWallet* _Nullable WalletNewWalletWithKeyStore(NSString* _Nullable keyStoreJson, NSString* _Nullable password, NSError* _Nullable* _Nullable error);

/**
 * Deprecated: 这个方法会缓存助记词、密码、私钥等信息，继续使用有泄露资产的风险 ⚠️
 */
FOUNDATION_EXPORT WalletWallet* _Nullable WalletNewWalletWithMnemonic(NSString* _Nullable mnemonic, NSError* _Nullable* _Nullable error);

FOUNDATION_EXPORT void WalletSaveAccountInfo(NSString* _Nullable walletId, WalletAccountInfo* _Nullable info);

FOUNDATION_EXPORT void WalletSaveWallet(WalletWallet* _Nullable wallet);

FOUNDATION_EXPORT WalletWallet* _Nullable WalletWatchWallet(NSString* _Nullable address, NSError* _Nullable* _Nullable error);

@class WalletWalletInfoProvider;

@interface WalletWalletInfoProvider : NSObject <goSeqRefInterface, WalletWalletInfoProvider> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (NSString* _Nonnull)keystore:(NSString* _Nullable)walletId;
- (NSString* _Nonnull)mnemonic:(NSString* _Nullable)walletId;
- (NSString* _Nonnull)password:(NSString* _Nullable)walletId;
- (NSString* _Nonnull)privateKey:(NSString* _Nullable)walletId;
@end

#endif
