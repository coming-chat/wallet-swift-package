// Objective-C API for talking to github.com/coming-chat/wallet-SDK/core/aptos Go package.
//   gobind -lang=objc github.com/coming-chat/wallet-SDK/core/aptos
//
// File is generated by gobind. Do not edit.

#ifndef __Aptos_H__
#define __Aptos_H__

@import Foundation;
#include "ref.h"
#include "Universe.objc.h"

#include "Base.objc.h"
#include "Aptosclient.objc.h"

@class AptosAccount;
@class AptosChain;
@class AptosNFTFetcher;
@class AptosNFTPayloadBCSBuilder;
@class AptosRestReachability;
@class AptosSignMessagePayload;
@class AptosSignMessageResponse;
@class AptosToken;
@class AptosUtil;
@protocol AptosIChain;
@class AptosIChain;

@protocol AptosIChain <NSObject>
- (BaseBalance* _Nullable)balanceOfAccount:(id<BaseAccount> _Nullable)account error:(NSError* _Nullable* _Nullable)error;
- (BaseBalance* _Nullable)balanceOfAddress:(NSString* _Nullable)address error:(NSError* _Nullable* _Nullable)error;
- (BaseBalance* _Nullable)balanceOfPublicKey:(NSString* _Nullable)publicKey error:(NSError* _Nullable* _Nullable)error;
- (NSString* _Nonnull)batchFetchTransactionStatus:(NSString* _Nullable)hashListString;
- (BaseOptionalString* _Nullable)estimatePayloadGasFeeBCS:(id<BaseAccount> _Nullable)account data:(NSData* _Nullable)data error:(NSError* _Nullable* _Nullable)error;
- (BaseTransactionDetail* _Nullable)fetchTransactionDetail:(NSString* _Nullable)hash error:(NSError* _Nullable* _Nullable)error;
- (long)fetchTransactionStatus:(NSString* _Nullable)hash;
- (AptosclientRestClient* _Nullable)getClient:(NSError* _Nullable* _Nullable)error;
- (id<BaseToken> _Nullable)mainToken;
- (NSString* _Nonnull)sendRawTransaction:(NSString* _Nullable)signedTx error:(NSError* _Nullable* _Nullable)error;
- (NSString* _Nonnull)submitTransactionPayloadBCS:(id<BaseAccount> _Nullable)account data:(NSData* _Nullable)data error:(NSError* _Nullable* _Nullable)error;
@end

@interface AptosAccount : NSObject <goSeqRefInterface, BaseAccount, BaseAddressUtil> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nullable instancetype)initWithMnemonic:(NSString* _Nullable)mnemonic;
- (NSString* _Nonnull)address;
/**
 * @return publicKey that will start with 0x.
 */
- (NSString* _Nonnull)decodeAddressToPublicKey:(NSString* _Nullable)address error:(NSError* _Nullable* _Nullable)error;
/**
 * @param publicKey can start with 0x or not.
 */
- (NSString* _Nonnull)encodePublicKeyToAddress:(NSString* _Nullable)publicKey error:(NSError* _Nullable* _Nullable)error;
- (BOOL)isValidAddress:(NSString* _Nullable)address;
/**
 * @return privateKey data
 */
- (NSData* _Nullable)privateKey:(NSError* _Nullable* _Nullable)error;
/**
 * @return privateKey string that will start with 0x.
 */
- (NSString* _Nonnull)privateKeyHex:(NSError* _Nullable* _Nullable)error;
/**
 * @return publicKey data
 */
- (NSData* _Nullable)publicKey;
/**
 * @return publicKey string that will start with 0x.
 */
- (NSString* _Nonnull)publicKeyHex;
- (NSData* _Nullable)sign:(NSData* _Nullable)message password:(NSString* _Nullable)password error:(NSError* _Nullable* _Nullable)error;
- (BaseOptionalString* _Nullable)signHex:(NSString* _Nullable)messageHex password:(NSString* _Nullable)password error:(NSError* _Nullable* _Nullable)error;
@end

@interface AptosChain : NSObject <goSeqRefInterface, BaseChain, AptosIChain> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nullable instancetype)initWithRestUrl:(NSString* _Nullable)restUrl;
@property (nonatomic) NSString* _Nonnull restUrl;
- (BaseBalance* _Nullable)balanceOfAccount:(id<BaseAccount> _Nullable)account error:(NSError* _Nullable* _Nullable)error;
- (BaseBalance* _Nullable)balanceOfAddress:(NSString* _Nullable)address error:(NSError* _Nullable* _Nullable)error;
- (BaseBalance* _Nullable)balanceOfPublicKey:(NSString* _Nullable)publicKey error:(NSError* _Nullable* _Nullable)error;
- (NSString* _Nonnull)batchFetchTransactionStatus:(NSString* _Nullable)hashListString;
- (BaseOptionalString* _Nullable)estimateGasPrice:(NSError* _Nullable* _Nullable)error;
// skipped method Chain.EstimateMaxGasAmount with unsupported parameter or return types

// skipped method Chain.EstimateMaxGasAmountBCS with unsupported parameter or return types

- (BaseOptionalString* _Nullable)estimatePayloadGasFeeBCS:(id<BaseAccount> _Nullable)account data:(NSData* _Nullable)data error:(NSError* _Nullable* _Nullable)error;
/**
 * Fetch transaction details through transaction hash
 */
- (BaseTransactionDetail* _Nullable)fetchTransactionDetail:(NSString* _Nullable)hash error:(NSError* _Nullable* _Nullable)error;
- (long)fetchTransactionStatus:(NSString* _Nullable)hash;
// skipped method Chain.GenerateTransaction with unsupported parameter or return types

- (BaseOptionalString* _Nullable)generateTransactionJson:(NSString* _Nullable)senderPublicKey payload:(NSString* _Nullable)payload error:(NSError* _Nullable* _Nullable)error;
- (AptosclientRestClient* _Nullable)getClient:(NSError* _Nullable* _Nullable)error;
- (BaseOptionalBool* _Nullable)isAllowedDirectTransferToken:(NSString* _Nullable)account error:(NSError* _Nullable* _Nullable)error;
- (id<BaseToken> _Nullable)mainToken;
/**
 * Send the raw transaction on-chain
@return the hex hash string
 */
- (NSString* _Nonnull)sendRawTransaction:(NSString* _Nullable)signedTx error:(NSError* _Nullable* _Nullable)error;
- (BaseOptionalString* _Nullable)signAndSendTransaction:(id<BaseAccount> _Nullable)account hexData:(NSString* _Nullable)hexData error:(NSError* _Nullable* _Nullable)error;
- (AptosSignMessageResponse* _Nullable)signMessage:(id<BaseAccount> _Nullable)account payload:(AptosSignMessagePayload* _Nullable)payload error:(NSError* _Nullable* _Nullable)error;
- (AptosSignMessageResponse* _Nullable)signMessageJson:(id<BaseAccount> _Nullable)account payload:(NSString* _Nullable)payload error:(NSError* _Nullable* _Nullable)error;
// skipped method Chain.SignTransaction with unsupported parameter or return types

- (BaseOptionalString* _Nullable)signTransactionJson:(id<BaseAccount> _Nullable)account transaction:(NSString* _Nullable)transaction error:(NSError* _Nullable* _Nullable)error;
// skipped method Chain.SubmitTransaction with unsupported parameter or return types

- (BaseOptionalString* _Nullable)submitTransactionJson:(NSString* _Nullable)signedTxn error:(NSError* _Nullable* _Nullable)error;
- (NSString* _Nonnull)submitTransactionPayloadBCS:(id<BaseAccount> _Nullable)account data:(NSData* _Nullable)data error:(NSError* _Nullable* _Nullable)error;
@end

@interface AptosNFTFetcher : NSObject <goSeqRefInterface, BaseNFTFetcher> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * Default is `GraphUrlMainnet` if graphUrl is emptry.
 */
- (nullable instancetype)init:(NSString* _Nullable)graphUrl;
/**
 * Deprecated: use `NewNFTFetcher(graphUrl)`
 */
- (nullable instancetype)initWithChain:(AptosChain* _Nullable)chain;
@property (nonatomic) AptosChain* _Nullable chain;
@property (nonatomic) NSString* _Nonnull graphUrl;
// skipped method NFTFetcher.FetchNFTs with unsupported parameter or return types

- (BaseOptionalString* _Nullable)fetchNFTsJsonString:(NSString* _Nullable)owner error:(NSError* _Nullable* _Nullable)error;
@end

/**
 * * BCS Payload builder for NFT (include Coming CID)

	### Demo
	example for `CIDTokenTransferPayload`
	```
	var payload, err = builder.CIDTokenTransferPayload(1234, receiverAddress)
	var gasPrice, err = chain.EstimateGasPrice()
	var gasAmount, err := chain.EstimatePayloadGasFeeBCS(account, payload)
	print("estimate gas fee = %s", gasPrice * gasAmount)
	var hash, err = chain.SubmitTransactionPayloadBCS(account, payload)
	print("submited hash = %s", hash)
	```
 */
@interface AptosNFTPayloadBCSBuilder : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nullable instancetype)init:(NSString* _Nullable)contractAddress;
/**
 * The contract provider for the CID module. Default is `0xc73d3c0a171c871e1858414734c7776f0b0cfa567c2af7f0070d1436aab2306b`
 */
@property (nonatomic) NSString* _Nonnull cidContract;
- (NSData* _Nullable)cidAllowDirectTransferPayload:(NSError* _Nullable* _Nullable)error;
// skipped method NFTPayloadBCSBuilder.CIDRegister with unsupported parameter or return types

- (NSData* _Nullable)cidTokenTransferPayload:(int64_t)cid toReceiver:(NSString* _Nullable)toReceiver error:(NSError* _Nullable* _Nullable)error;
- (NSData* _Nullable)cancelTokenOffer:(NSString* _Nullable)receiver creator:(NSString* _Nullable)creator collection:(NSString* _Nullable)collection name:(NSString* _Nullable)name error:(NSError* _Nullable* _Nullable)error;
/**
 * * Build payload that claim token, the nft info will be obtaining through offer hash.

  - @param offerHash The submitted hash of the transaction that offer the token
  - @param chain The chain on which the transaction resides
  - @param receiver The token receiver will be check whether it matches the nft offer information.
  - @return The claim token payload
 */
- (NSData* _Nullable)claimTokenFromHash:(NSString* _Nullable)offerHash chain:(AptosChain* _Nullable)chain receiver:(NSString* _Nullable)receiver error:(NSError* _Nullable* _Nullable)error;
/**
 * * Build payload that claim token

  - @param sender The transferred token owner
  - @param creator The token creator
  - @param collection The token's collection name
  - @param name The token's name
  - @return The claim token payload.
 */
- (NSData* _Nullable)claimTokenTransactionParams:(NSString* _Nullable)sender creator:(NSString* _Nullable)creator collection:(NSString* _Nullable)collection name:(NSString* _Nullable)name error:(NSError* _Nullable* _Nullable)error;
- (NSData* _Nullable)offerTokenTransactionNFT:(NSString* _Nullable)receiver nft:(BaseNFT* _Nullable)nft error:(NSError* _Nullable* _Nullable)error;
/**
 * * Build payload that offer token

  - @param receiver The token receiver
  - @param creator The token creator
  - @param collection The token's collection name
  - @param name The token's name
  - @return The offer token payload.
 */
- (NSData* _Nullable)offerTokenTransactionParams:(NSString* _Nullable)receiver creator:(NSString* _Nullable)creator collection:(NSString* _Nullable)collection name:(NSString* _Nullable)name error:(NSError* _Nullable* _Nullable)error;
/**
 * Note: The `tokenVersion`, `amount` should be uint64, but it is not supported by the SDK generated by gomobile.
 */
- (NSData* _Nullable)tokenTransferPayload:(NSString* _Nullable)receiver creator:(NSString* _Nullable)creator collectionName:(NSString* _Nullable)collectionName tokenName:(NSString* _Nullable)tokenName tokenVersion:(int64_t)tokenVersion amount:(int64_t)amount error:(NSError* _Nullable* _Nullable)error;
@end

@interface AptosRestReachability : NSObject <goSeqRefInterface, BaseRpcReachability> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nullable instancetype)init;
/**
 * @return latency (ms) of rpc query blockNumber. -1 means the connection failed.
 */
- (BaseRpcLatency* _Nullable)latencyOf:(NSString* _Nullable)rpc timeout:(int64_t)timeout error:(NSError* _Nullable* _Nullable)error;
@end

@interface AptosSignMessagePayload : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
/**
 * Should we include the address of the account in the message
 */
@property (nonatomic) BOOL address;
/**
 * Should we include the domain of the dApp
 */
@property (nonatomic) BOOL application;
/**
 * Should we include the current chain id the wallet is connected to
 */
@property (nonatomic) BOOL chainId;
/**
 * The message to be signed and displayed to the user
 */
@property (nonatomic) NSString* _Nonnull message;
/**
 * A nonce the dApp should generate
 */
@property (nonatomic) int64_t nonce;
- (NSString* _Nonnull)jsonString;
@end

@interface AptosSignMessageResponse : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) NSString* _Nonnull address;
@property (nonatomic) NSString* _Nonnull application;
@property (nonatomic) int64_t chainId;
@property (nonatomic) NSString* _Nonnull message;
@property (nonatomic) int64_t nonce;
@property (nonatomic) NSString* _Nonnull prefix;
@property (nonatomic) NSString* _Nonnull fullMessage;
@property (nonatomic) NSString* _Nonnull signature;
@property (nonatomic) NSData* _Nullable bitmap;
- (NSString* _Nonnull)jsonString;
@end

@interface AptosToken : NSObject <goSeqRefInterface, BaseToken> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * @param tag format `address::module_name::name`, e.g. "0x1::aptos_coin::AptosCoin"
 */
- (nullable instancetype)init:(AptosChain* _Nullable)chain tag:(NSString* _Nullable)tag;
- (BaseBalance* _Nullable)balanceOfAccount:(id<BaseAccount> _Nullable)account error:(NSError* _Nullable* _Nullable)error;
- (BaseBalance* _Nullable)balanceOfAddress:(NSString* _Nullable)address error:(NSError* _Nullable* _Nullable)error;
- (BaseBalance* _Nullable)balanceOfPublicKey:(NSString* _Nullable)publicKey error:(NSError* _Nullable* _Nullable)error;
- (BaseOptionalString* _Nullable)buildTransferTx:(NSString* _Nullable)privateKey receiverAddress:(NSString* _Nullable)receiverAddress amount:(NSString* _Nullable)amount error:(NSError* _Nullable* _Nullable)error;
- (BaseOptionalString* _Nullable)buildTransferTxWithAccount:(AptosAccount* _Nullable)account receiverAddress:(NSString* _Nullable)receiverAddress amount:(NSString* _Nullable)amount error:(NSError* _Nullable* _Nullable)error;
- (id<BaseChain> _Nullable)chain;
- (BaseOptionalString* _Nullable)ensureOwnerRegistedToken:(AptosAccount* _Nullable)owner error:(NSError* _Nullable* _Nullable)error;
- (BaseOptionalString* _Nullable)estimateFees:(AptosAccount* _Nullable)account receiverAddress:(NSString* _Nullable)receiverAddress amount:(NSString* _Nullable)amount error:(NSError* _Nullable* _Nullable)error;
- (BaseOptionalBool* _Nullable)hasRegisted:(NSString* _Nullable)ownerAddress error:(NSError* _Nullable* _Nullable)error;
/**
 * @return transaction hash if register token succeed.
 */
- (BaseOptionalString* _Nullable)registerTokenForOwner:(AptosAccount* _Nullable)owner error:(NSError* _Nullable* _Nullable)error;
- (BaseTokenInfo* _Nullable)tokenInfo:(NSError* _Nullable* _Nullable)error;
@end

@interface AptosUtil : NSObject <goSeqRefInterface, BaseAddressUtil> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nullable instancetype)init;
/**
 * Warning: Aptos cannot support decode address to public key
 */
- (NSString* _Nonnull)decodeAddressToPublicKey:(NSString* _Nullable)address error:(NSError* _Nullable* _Nullable)error;
/**
 * @param publicKey can start with 0x or not.
 */
- (NSString* _Nonnull)encodePublicKeyToAddress:(NSString* _Nullable)publicKey error:(NSError* _Nullable* _Nullable)error;
- (BOOL)isValidAddress:(NSString* _Nullable)address;
@end

FOUNDATION_EXPORT const int64_t AptosAptosDecimal;
FOUNDATION_EXPORT NSString* _Nonnull const AptosAptosName;
FOUNDATION_EXPORT NSString* _Nonnull const AptosAptosSymbol;
FOUNDATION_EXPORT NSString* _Nonnull const AptosFaucetUrlDevnet;
FOUNDATION_EXPORT NSString* _Nonnull const AptosFaucetUrlTestnet;
FOUNDATION_EXPORT const int64_t AptosGasPrice;
FOUNDATION_EXPORT NSString* _Nonnull const AptosGraphUrlMainnet;
FOUNDATION_EXPORT NSString* _Nonnull const AptosGraphUrlTestnet;
FOUNDATION_EXPORT const int64_t AptosMaxGasAmount;
FOUNDATION_EXPORT const int64_t AptosTxExpireSec;

/**
 * rename for support android.
Android cant support both NewAccountWithMnemonic(string) and NewAccountWithPrivateKey(string)
 */
FOUNDATION_EXPORT AptosAccount* _Nullable AptosAccountWithPrivateKey(NSString* _Nullable prikey, NSError* _Nullable* _Nullable error);

FOUNDATION_EXPORT NSString* _Nonnull AptosDecodeAddressToPublicKey(NSString* _Nullable address, NSError* _Nullable* _Nullable error);

/**
 * @param publicKey can start with 0x or not.
 */
FOUNDATION_EXPORT NSString* _Nonnull AptosEncodePublicKeyToAddress(NSString* _Nullable publicKey, NSError* _Nullable* _Nullable error);

/**
 * *
 * This creates an account if it does not exist and mints the specified amount of
 * coins into that account
 * @param address Hex-encoded 16 bytes Aptos account address wich mints tokens
 * @param amount Amount of tokens to mint
 * @param faucetUrl default https://faucet.devnet.aptoslabs.com
 * @returns Hashes of submitted transactions, e.g. "hash1,has2,hash3,..."
 */
FOUNDATION_EXPORT BaseOptionalString* _Nullable AptosFaucetFundAccount(NSString* _Nullable address, int64_t amount, NSString* _Nullable faucetUrl, NSError* _Nullable* _Nullable error);

/**
 * @param chainnet chain name
 */
FOUNDATION_EXPORT BOOL AptosIsValidAddress(NSString* _Nullable address);

FOUNDATION_EXPORT AptosAccount* _Nullable AptosNewAccountWithMnemonic(NSString* _Nullable mnemonic, NSError* _Nullable* _Nullable error);

FOUNDATION_EXPORT AptosChain* _Nullable AptosNewChainWithRestUrl(NSString* _Nullable restUrl);

FOUNDATION_EXPORT AptosToken* _Nullable AptosNewMainToken(AptosChain* _Nullable chain);

/**
 * Default is `GraphUrlMainnet` if graphUrl is emptry.
 */
FOUNDATION_EXPORT AptosNFTFetcher* _Nullable AptosNewNFTFetcher(NSString* _Nullable graphUrl);

/**
 * Deprecated: use `NewNFTFetcher(graphUrl)`
 */
FOUNDATION_EXPORT AptosNFTFetcher* _Nullable AptosNewNFTFetcherWithChain(AptosChain* _Nullable chain);

FOUNDATION_EXPORT AptosNFTPayloadBCSBuilder* _Nullable AptosNewNFTPayloadBCSBuilder(NSString* _Nullable contractAddress);

FOUNDATION_EXPORT AptosRestReachability* _Nullable AptosNewRestReachability(void);

/**
 * @param tag format `address::module_name::name`, e.g. "0x1::aptos_coin::AptosCoin"
 */
FOUNDATION_EXPORT AptosToken* _Nullable AptosNewToken(AptosChain* _Nullable chain, NSString* _Nullable tag, NSError* _Nullable* _Nullable error);

FOUNDATION_EXPORT AptosUtil* _Nullable AptosNewUtil(NSError* _Nullable* _Nullable error);

@class AptosIChain;

@interface AptosIChain : NSObject <goSeqRefInterface, AptosIChain> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (BaseBalance* _Nullable)balanceOfAccount:(id<BaseAccount> _Nullable)account error:(NSError* _Nullable* _Nullable)error;
- (BaseBalance* _Nullable)balanceOfAddress:(NSString* _Nullable)address error:(NSError* _Nullable* _Nullable)error;
- (BaseBalance* _Nullable)balanceOfPublicKey:(NSString* _Nullable)publicKey error:(NSError* _Nullable* _Nullable)error;
- (NSString* _Nonnull)batchFetchTransactionStatus:(NSString* _Nullable)hashListString;
- (BaseOptionalString* _Nullable)estimatePayloadGasFeeBCS:(id<BaseAccount> _Nullable)account data:(NSData* _Nullable)data error:(NSError* _Nullable* _Nullable)error;
- (BaseTransactionDetail* _Nullable)fetchTransactionDetail:(NSString* _Nullable)hash error:(NSError* _Nullable* _Nullable)error;
- (long)fetchTransactionStatus:(NSString* _Nullable)hash;
- (AptosclientRestClient* _Nullable)getClient:(NSError* _Nullable* _Nullable)error;
- (id<BaseToken> _Nullable)mainToken;
- (NSString* _Nonnull)sendRawTransaction:(NSString* _Nullable)signedTx error:(NSError* _Nullable* _Nullable)error;
- (NSString* _Nonnull)submitTransactionPayloadBCS:(id<BaseAccount> _Nullable)account data:(NSData* _Nullable)data error:(NSError* _Nullable* _Nullable)error;
@end

#endif
